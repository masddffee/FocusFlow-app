/**
 * üéØ Phase 4 È©óË≠âÔºöID ‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶
 * 
 * È©óË≠â‰ªªÂãôÂíåÊéíÁ®ã‰ªªÂãôÁöÑ ID ÁîüÊàêÊòØÂê¶ÈÅµÂæ™‰∏ÄËá¥ÁöÑÂëΩÂêçË¶èÂâá
 */

import { convertSubtaskSchedulesToTasks } from '../utils/scheduling';
import type { SubtaskSchedule } from '../utils/scheduling-types';

// Mock logger to avoid console output during tests
jest.mock('../lib/logger', () => ({
  log: {
    info: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
  },
}));

describe('ID ‰∏ÄËá¥ÊÄßÈ©óË≠âÊ∏¨Ë©¶', () => {
  
  describe('Â≠ê‰ªªÂãôÊéíÁ®ã ID Ê†ºÂºè', () => {
    it('ÊáâË©≤ÁîüÊàê‰∏ÄËá¥ÁöÑÂ≠ê‰ªªÂãôÊéíÁ®ã ID', () => {
      const mockSchedules: SubtaskSchedule[] = [
        {
          subtaskId: 'subtask_1',
          subtaskTitle: 'Ê∏¨Ë©¶Â≠ê‰ªªÂãô 1',
          date: '2025-08-12',
          timeSlot: { start: '09:00', end: '10:00' },
          duration: 60,
          order: 1
        },
        {
          subtaskId: 'subtask_2',
          subtaskTitle: 'Ê∏¨Ë©¶Â≠ê‰ªªÂãô 2',
          date: '2025-08-12',
          timeSlot: { start: '10:00', end: '11:00' },
          duration: 60,
          order: 2
        }
      ];

      const parentTaskId = 'task-1234567890-abc12';
      const scheduledTasks = convertSubtaskSchedulesToTasks(mockSchedules, parentTaskId);

      expect(scheduledTasks).toHaveLength(2);
      
      // È©óË≠â ID Ê†ºÂºè‰∏ÄËá¥ÊÄß
      expect(scheduledTasks[0].id).toBe('subtask-task-1234567890-abc12-subtask_1');
      expect(scheduledTasks[1].id).toBe('subtask-task-1234567890-abc12-subtask_2');
      
      // È©óË≠âÁà∂‰ªªÂãô ID Ê≠£Á¢∫ÊÄß
      expect(scheduledTasks[0].taskId).toBe(parentTaskId);
      expect(scheduledTasks[1].taskId).toBe(parentTaskId);
      
      // È©óË≠âÂ≠ê‰ªªÂãôËøΩËπ§Ë≥áË®ä
      expect(scheduledTasks[0].subtaskId).toBe('subtask_1');
      expect(scheduledTasks[1].subtaskId).toBe('subtask_2');
    });

    it('ÊáâË©≤ËôïÁêÜÈÇäÁ∑£ÊÉÖÊ≥ÅÁöÑ ID ÁîüÊàê', () => {
      const mockSchedules: SubtaskSchedule[] = [
        {
          subtaskId: 'subtask-with-hyphens',
          subtaskTitle: 'Âê´ÈÄ£Â≠óÁ¨¶ÁöÑÂ≠ê‰ªªÂãô',
          date: '2025-08-12',
          timeSlot: { start: '09:00', end: '10:00' },
          duration: 60,
          order: 1
        }
      ];

      const parentTaskId = 'task-with-multiple-hyphens-123';
      const scheduledTasks = convertSubtaskSchedulesToTasks(mockSchedules, parentTaskId);

      expect(scheduledTasks).toHaveLength(1);
      expect(scheduledTasks[0].id).toBe('subtask-task-with-multiple-hyphens-123-subtask-with-hyphens');
      expect(scheduledTasks[0].taskId).toBe(parentTaskId);
    });
  });

  describe('Êï¥È´î‰ªªÂãôÊéíÁ®ã ID Ê†ºÂºè', () => {
    it('ÊáâË©≤ÁîüÊàê‰∏ÄËá¥ÁöÑÊï¥È´î‰ªªÂãôÊéíÁ®ã ID', () => {
      // Ê®°Êì¨Êï¥È´î‰ªªÂãôÊéíÁ®ã ID Ê†ºÂºè
      const taskId = 'task-1234567890-def45';
      const expectedScheduledId = `scheduled-${taskId}`;
      
      expect(expectedScheduledId).toBe('scheduled-task-1234567890-def45');
      
      // È©óË≠â ID Ê†ºÂºè‰∏ÄËá¥ÊÄß
      expect(expectedScheduledId.startsWith('scheduled-')).toBe(true);
      expect(expectedScheduledId.includes(taskId)).toBe(true);
    });
  });

  describe('ID ÂîØ‰∏ÄÊÄßÈ©óË≠â', () => {
    it('‰∏çÂêåÈ°ûÂûãÁöÑÊéíÁ®ã‰ªªÂãôÊáâË©≤Êúâ‰∏çÂêåÁöÑ ID ÂâçÁ∂¥', () => {
      const taskId = 'task-1234567890-ghi78';
      
      // Êï¥È´î‰ªªÂãôÊéíÁ®ã ID
      const wholeTaskId = `scheduled-${taskId}`;
      
      // Â≠ê‰ªªÂãôÊéíÁ®ã ID
      const subtaskId = `subtask-${taskId}-subtask_1`;
      
      // È©óË≠â ID ‰∏çÊúÉË°ùÁ™Å
      expect(wholeTaskId).not.toBe(subtaskId);
      expect(wholeTaskId.startsWith('scheduled-')).toBe(true);
      expect(subtaskId.startsWith('subtask-')).toBe(true);
    });

    it('Áõ∏ÂêåÁà∂‰ªªÂãôÁöÑ‰∏çÂêåÂ≠ê‰ªªÂãôÊáâË©≤ÊúâÂîØ‰∏ÄÁöÑ ID', () => {
      const mockSchedules: SubtaskSchedule[] = [
        {
          subtaskId: 'subtask_a',
          subtaskTitle: 'Â≠ê‰ªªÂãô A',
          date: '2025-08-12',
          timeSlot: { start: '09:00', end: '10:00' },
          duration: 60,
          order: 1
        },
        {
          subtaskId: 'subtask_b',
          subtaskTitle: 'Â≠ê‰ªªÂãô B',
          date: '2025-08-12',
          timeSlot: { start: '10:00', end: '11:00' },
          duration: 60,
          order: 2
        }
      ];

      const parentTaskId = 'task-1234567890-jkl90';
      const scheduledTasks = convertSubtaskSchedulesToTasks(mockSchedules, parentTaskId);

      // È©óË≠âÊâÄÊúâ ID ÈÉΩÊòØÂîØ‰∏ÄÁöÑ
      const ids = scheduledTasks.map(task => task.id);
      const uniqueIds = new Set(ids);
      
      expect(ids.length).toBe(uniqueIds.size);
      expect(ids[0]).not.toBe(ids[1]);
    });
  });

  describe('ÈåØË™§ËôïÁêÜ', () => {
    it('ÊáâË©≤ËôïÁêÜÁ©∫ÁöÑÊéíÁ®ãÂàóË°®', () => {
      const mockSchedules: SubtaskSchedule[] = [];
      const parentTaskId = 'task-1234567890-mno12';
      
      const scheduledTasks = convertSubtaskSchedulesToTasks(mockSchedules, parentTaskId);
      
      expect(scheduledTasks).toHaveLength(0);
      expect(Array.isArray(scheduledTasks)).toBe(true);
    });

    it('ÊáâË©≤ËôïÁêÜÁº∫Â∞ëÊ®ôÈ°åÁöÑÂ≠ê‰ªªÂãô', () => {
      const mockSchedules: SubtaskSchedule[] = [
        {
          subtaskId: 'subtask_no_title',
          subtaskTitle: '', // Á©∫Ê®ôÈ°å
          date: '2025-08-12',
          timeSlot: { start: '09:00', end: '10:00' },
          duration: 60,
          order: 1
        }
      ];

      const parentTaskId = 'task-1234567890-pqr34';
      const scheduledTasks = convertSubtaskSchedulesToTasks(mockSchedules, parentTaskId);

      expect(scheduledTasks).toHaveLength(1);
      expect(scheduledTasks[0].id).toBe('subtask-task-1234567890-pqr34-subtask_no_title');
      expect(scheduledTasks[0].title).toBe('Â≠ê‰ªªÂãô 1'); // È†êË®≠Ê®ôÈ°å
    });
  });
});