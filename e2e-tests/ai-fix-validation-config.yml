# FocusFlow AI 修復後驗證測試配置
# 專門驗證 AI 品質與效能修復效果的端到端測試
# 
# 版本: 1.0
# 作者: FocusFlow Team  
# 更新日期: 2025-07-31

name: "FocusFlow AI 修復後驗證測試"
version: "1.0"
description: "驗證 AI 品質修復後的實際效果：時間預估、回應品質、處理速度和錯誤處理"

# 測試環境配置
environment:
  baseUrl: "http://localhost:8081"
  backendUrl: "http://localhost:3000"
  timeout: 15000  # 降低超時以測試速度改善
  retries: 1      # 減少重試，確保 AI 必須正常工作
  screenshotPath: "./test-results/ai-fix-validation/screenshots"
  videoPath: "./test-results/ai-fix-validation/videos"
  reportPath: "./test-results/ai-fix-validation/reports"

# 瀏覽器配置
browsers:
  - name: "chromium"
    enabled: true
    headless: false
    viewport:
      width: 1280
      height: 720
    recordVideo: true
    trace: true

# AI 修復驗證專用測試數據
testData:
  complexTask:
    title: "建立完整的 AI 對話系統"
    description: "使用 Python 和機器學習技術建立智能對話系統，包含自然語言處理、意圖識別、對話管理和響應生成功能，能夠處理多輪對話並提供個性化回應"
    expectedMinDuration: 15
    expectedMaxDuration: 300
    expectedSubtasks: { min: 8, max: 15 }
    
  mediumTask:
    title: "學習 React Native 開發"
    description: "完整學習 React Native 移動應用開發，掌握組件開發、狀態管理、導航系統、API 整合、調試技巧和發布流程"
    expectedMinDuration: 15
    expectedMaxDuration: 200
    expectedSubtasks: { min: 6, max: 12 }
    
  simpleTask:
    title: "準備英文面試"
    description: "針對軟體工程師職位準備英文技術面試，包括技術問題回答、專案經驗介紹和英語表達練習"
    expectedMinDuration: 15
    expectedMaxDuration: 120
    expectedSubtasks: { min: 4, max: 8 }

# AI 修復驗證測試套件
testSuites:
  
  # 測試套件 1: AI 品質修復驗證
  - name: "ai-quality-fix-validation"
    description: "驗證 AI 時間預估和回應品質修復效果"
    priority: "critical"
    
    tests:
      - name: "01-complex-task-generation"
        description: "複雜任務 AI 生成品質驗證"
        maxDuration: 15000  # 最多 15 秒
        steps:
          - action: "navigate"
            target: "{{ environment.baseUrl }}/add-task"
            screenshot:
              name: "complex-task-start"
              description: "開始複雜任務測試"
          
          - action: "fillTaskForm"
            title: "{{ testData.complexTask.title }}"
            description: "{{ testData.complexTask.description }}"
            screenshot:
              name: "complex-task-form-filled"
              
          - action: "clickSmartGenerate"
            screenshot:
              name: "complex-task-generate-clicked"
              
          - action: "measureProcessingTime"
            startEvent: "ai-request-sent"
            endEvent: "subtasks-displayed"
            maxAllowedTime: 10000  # 10 秒內必須完成
            
          - action: "waitForPersonalizationModal"
            timeout: 12000
            screenshot:
              name: "complex-task-personalization"
              
          - action: "answerPersonalizationQuestions"
            strategy: "comprehensive"
            answers:
              experience: "intermediate"
              timeAvailable: "3-4 hours daily"
              learningStyle: "project-based learning"
              goal: "build production systems"
              
          - action: "waitForSubtasks"
            timeout: 15000
            screenshot:
              name: "complex-task-subtasks-generated"
              
          - action: "validateSubtaskQuality"
            checks:
              minSubtasks: "{{ testData.complexTask.expectedSubtasks.min }}"
              maxSubtasks: "{{ testData.complexTask.expectedSubtasks.max }}"
              minDuration: "{{ testData.complexTask.expectedMinDuration }}"
              maxDuration: "{{ testData.complexTask.expectedMaxDuration }}"
              minDescriptionLength: 50
              requiredSentences: 2
            screenshot:
              name: "complex-task-quality-validated"
              onError: true

      - name: "02-medium-task-generation"
        description: "中等任務 AI 生成品質驗證"
        maxDuration: 12000
        steps:
          - action: "navigate"
            target: "{{ environment.baseUrl }}/add-task"
            
          - action: "fillTaskForm"
            title: "{{ testData.mediumTask.title }}"
            description: "{{ testData.mediumTask.description }}"
            
          - action: "clickSmartGenerate"
            screenshot:
              name: "medium-task-generate-start"
              
          - action: "measureProcessingTime"
            startEvent: "ai-request-sent"
            endEvent: "subtasks-displayed"
            maxAllowedTime: 8000
            
          - action: "completePersonalization"
            screenshot:
              name: "medium-task-personalization-done"
              
          - action: "validateSubtaskQuality"
            checks:
              minSubtasks: "{{ testData.mediumTask.expectedSubtasks.min }}"
              maxSubtasks: "{{ testData.mediumTask.expectedSubtasks.max }}"
              minDuration: "{{ testData.mediumTask.expectedMinDuration }}"
              maxDuration: "{{ testData.mediumTask.expectedMaxDuration }}"
              minDescriptionLength: 40
              requiredSentences: 2
            screenshot:
              name: "medium-task-validated"

      - name: "03-simple-task-generation"
        description: "簡單任務 AI 生成品質驗證"
        maxDuration: 10000
        steps:
          - action: "navigate"
            target: "{{ environment.baseUrl }}/add-task"
            
          - action: "fillTaskForm"
            title: "{{ testData.simpleTask.title }}"
            description: "{{ testData.simpleTask.description }}"
            
          - action: "clickSmartGenerate"
            
          - action: "measureProcessingTime"
            startEvent: "ai-request-sent"
            endEvent: "subtasks-displayed"
            maxAllowedTime: 6000
            
          - action: "completePersonalization"
            
          - action: "validateSubtaskQuality"
            checks:
              minSubtasks: "{{ testData.simpleTask.expectedSubtasks.min }}"
              maxSubtasks: "{{ testData.simpleTask.expectedSubtasks.max }}"
              minDuration: "{{ testData.simpleTask.expectedMinDuration }}"
              maxDuration: "{{ testData.simpleTask.expectedMaxDuration }}"
              minDescriptionLength: 30
              requiredSentences: 2
            screenshot:
              name: "simple-task-validated"

  # 測試套件 2: API 可靠性驗證
  - name: "api-reliability-validation"
    description: "驗證 API 可靠性和錯誤處理改善"
    priority: "critical"
    
    tests:
      - name: "01-no-fallback-verification"
        description: "驗證移除後備機制後的 API 可靠性"
        steps:
          - action: "navigate"
            target: "{{ environment.baseUrl }}/add-task"
            
          - action: "interceptNetworkRequests"
            pattern: "**/api/ai/**"
            logRequests: true
            logResponses: true
            
          - action: "fillTaskForm"
            title: "測試 API 可靠性"
            description: "驗證後端 API 在無後備機制情況下的穩定性"
            
          - action: "clickSmartGenerate"
            
          - action: "verifyNoFallbackResponse"
            checks:
              - noFallbackFlag: true
              - noLocalGeneration: true
              - validAPIResponse: true
            screenshot:
              name: "no-fallback-verified"
              onError: true

      - name: "02-json-parsing-reliability"
        description: "驗證 JSON 解析可靠性改善"
        steps:
          - action: "monitorAPIResponses"
            pattern: "**/api/ai/**"
            checks:
              - validJSON: true
              - noTruncation: true
              - completeResponse: true
              
          - action: "generateMultipleTasks"
            count: 3
            taskTypes: ["complex", "medium", "simple"]
            
          - action: "verifyAllResponsesValid"
            screenshot:
              name: "json-parsing-validated"
              onError: true

  # 測試套件 3: UI 顯示驗證
  - name: "ui-display-validation"
    description: "驗證前端正確接收並顯示後端回應"
    priority: "high"
    
    tests:
      - name: "01-subtask-display-verification"
        description: "驗證子任務在 UI 中正確顯示"
        steps:
          - action: "generateTask"
            title: "UI 顯示測試任務"
            description: "測試前端是否正確顯示後端生成的子任務內容"
            
          - action: "verifyUIElements"
            checks:
              - subtaskTitlesVisible: true
              - subtaskDescriptionsVisible: true
              - durationDisplayed: true
              - difficultyDisplayed: true
              - orderPreserved: true
            screenshot:
              name: "ui-elements-verified"
              
          - action: "verifyDataConsistency"
            description: "確保 UI 顯示的數據與 API 回應一致"
            screenshot:
              name: "data-consistency-verified"

# 專用錯誤處理配置 - 嚴格模式
errorHandling:
  
  # 自動截圖設定
  autoScreenshot:
    enabled: true
    onError: true
    onTimeout: true
    onAssertion: true
    quality: 95
    fullPage: true
    
  # 嚴格錯誤處理 - 不允許任何錯誤
  recovery:
    enabled: false  # 禁用恢復，確保 AI 必須正常工作
    
  # 詳細日誌
  logging:
    level: "debug"
    includeScreenshots: true
    includeNetworkLogs: true
    includeConsoleErrors: true
    includeAPIMetrics: true
    
# AI 修復驗證專用報告配置
reporting:
  formats:
    - "html"
    - "json"
    
  html:
    title: "FocusFlow AI 修復驗證報告"
    includeScreenshots: true
    includeAPILogs: true
    includePerformanceMetrics: true
    theme: "light"
    
  customMetrics:
    - name: "AI 回應時間"
      description: "從請求到回應完成的時間"
      unit: "ms"
      target: "< 10000"
      
    - name: "時間預估準確性"
      description: "子任務時間預估在 15-300 分鐘範圍的比例"
      unit: "%"
      target: "= 100"
      
    - name: "回應品質分數"
      description: "基於描述長度和詳細程度的品質分數"
      unit: "score"
      target: "> 8/10"
      
    - name: "API 可靠性"
      description: "無錯誤 API 回應的比例"
      unit: "%"
      target: "= 100"

# 效能監控配置
performance:
  enabled: true
  metrics:
    - "apiResponseTime"
    - "subtaskGenerationTime"
    - "uiRenderTime"
    
  thresholds:
    apiResponseTime: 10000      # 10 秒內
    subtaskGenerationTime: 8000 # 8 秒內
    uiRenderTime: 2000          # 2 秒內
    
  screenshot:
    onThresholdExceeded: true

# 清理配置
cleanup:
  afterEach: true
  afterSuite: true
  actions:
    - "clearLocalStorage"
    - "clearSessionStorage"
    - "clearCookies"

# 嚴格重試配置
retry:
  enabled: false  # 禁用重試，確保一次性成功