name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Create test environment file
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "PLAYWRIGHT_TEST=true" >> .env.test
          
      - name: Start backend server
        run: |
          npm run backend &
          sleep 10
          curl -f http://localhost:8080 || exit 1
        env:
          NODE_ENV: test
          
      - name: Start frontend server
        run: |
          npm run web &
          sleep 15
          curl -f http://localhost:8080 || exit 1
        env:
          NODE_ENV: test
          
      - name: Run E2E tests
        run: npm run e2e --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: test-results/
          retention-days: 7
          
      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ matrix.browser }}
          path: test-results/html-report/
          retention-days: 7
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = path.join('test-results', 'results.json');
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                const passed = report.stats.passed;
                const failed = report.stats.failed;
                const total = passed + failed;
                
                const comment = `## E2E Test Results (${{ matrix.browser }})
                
                - ✅ Passed: ${passed}
                - ❌ Failed: ${failed}
                - 📊 Total: ${total}
                
                ${failed > 0 ? '⚠️ Some tests failed. Check the detailed report for more information.' : '🎉 All tests passed!'}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not parse test results:', error);
            }

  mcp-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Start MCP server
        run: |
          npm run mcp:start &
          sleep 10
          curl -f http://localhost:8081 || exit 1
        env:
          PLAYWRIGHT_MCP_PORT: 8081
          
      - name: Test MCP server functionality
        run: |
          # Basic health check
          curl -f http://localhost:8081/health || exit 1
          
          # Test MCP server endpoints
          echo "MCP server is running and accessible"
          
      - name: Run MCP integration tests
        run: |
          # Add specific MCP integration tests here
          echo "Running MCP integration tests"
          npm run e2e -- --grep "MCP"
        env:
          CI: true
          PLAYWRIGHT_MCP_ENABLED: true

  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run backend security tests
        run: npm run backend:test
        
      - name: Run security-focused E2E tests
        run: |
          npx playwright install --with-deps
          npm run e2e -- --grep "security|auth|permission"
        env:
          CI: true
          
      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: test-results/
          retention-days: 14

  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run performance tests
        run: |
          npm run e2e -- --grep "performance|load|timeout"
        env:
          CI: true
          PLAYWRIGHT_PERFORMANCE_TESTING: true
          
      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: test-results/
          retention-days: 7

  visual-regression-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run visual regression tests
        run: |
          npm run e2e -- --grep "visual|screenshot|appearance"
        env:
          CI: true
          
      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: test-results/
          retention-days: 14

  deploy-test-results:
    runs-on: ubuntu-latest
    needs: [e2e-tests, mcp-tests, security-tests, performance-tests, visual-regression-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
          
      - name: Deploy test results to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: all-test-results
          destination_dir: test-reports/${{ github.run_number }}
          
      - name: Create test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Run Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Reports: Available in artifacts" >> $GITHUB_STEP_SUMMARY