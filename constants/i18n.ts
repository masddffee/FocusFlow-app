import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import * as Localization from 'expo-localization';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Ëã±ÊñáÁøªË≠Ø
const en = {
  // Tab Navigation
  tabs: {
    home: 'Home',
    tasks: 'Tasks',
    stats: 'Stats',
    profile: 'Profile'
  },
  
  // Home Screen
  home: {
    title: 'Today\'s Schedule',
    welcome: 'Welcome back!',
    noTasks: 'No tasks scheduled for today',
    addFirstTask: 'Add your first task',
    todayProgress: 'Today\'s Progress',
    upcomingTasks: 'Upcoming Tasks',
    completedTasks: 'Completed Tasks'
  },

  // Tasks Screen
  tasks: {
    title: 'Tasks',
    allTasks: 'All Tasks',
    pending: 'Pending',
    completed: 'Completed',
    overdue: 'Overdue',
    addTask: 'Add Task',
    noTasks: 'No tasks found',
    createFirst: 'Create your first task to get started',
    schedule: 'Schedule',
    filters: 'Filters',
    sortBy: 'Sort by',
    dueDate: 'Due Date',
    priority: 'Priority',
    difficulty: 'Difficulty',
    category: 'Category',
    weekView: 'Week View',
    listView: 'List View',
    noScheduledTasks: 'No scheduled tasks',
    rescheduled: 'Task rescheduled successfully',
    rescheduleError: 'Failed to reschedule task',
    aiRescheduleSuccess: 'ü§ñ AI Reschedule Successful',
    aiRescheduleFailure: '‚ùå Unable to Reschedule',
    viewSuggestions: 'View Suggestions',
    optimizationSuggestions: 'Optimization Suggestions',
    extendDeadline: 'Extend Deadline',
    originalTime: 'Original',
    newTime: 'New time',
    suggestions: 'Suggestions:',
    systemError: 'System Error',
    rescheduleErrorMessage: 'An error occurred during rescheduling. Please try again later.',
    durationCompressionWarning: '‚ö†Ô∏è Duration Compression Warning',
    taskTooLong: 'Task Too Long for Available Slots',
    splitTaskRecommendation: 'Consider splitting this task into smaller segments',
    durationValidationFailed: 'Duration validation failed',
    usingOriginalDuration: 'Using original estimated duration'
  },

  // Stats Screen
  stats: {
    title: 'Statistics',
    daily: 'Daily',
    weekly: 'Weekly',
    monthly: 'Monthly',
    focusTime: 'Focus Time',
    tasksCompleted: 'Tasks Completed',
    distractions: 'Distractions',
    sessions: 'Sessions',
    todayProgress: 'Today\'s Progress',
    productivityTips: 'Productivity Tips',
    generate: 'Generate',
    insights: 'Insights',
    streaks: 'Streaks',
    goals: 'Goals',
    achievements: 'Achievements'
  },

  // Add Task Screen
  addTask: {
    title: 'Add Task',
    editTitle: 'Edit Task',
    taskTitle: 'Task Title',
    taskTitlePlaceholder: 'What do you need to accomplish?',
    description: 'Description (Optional)',
    descriptionPlaceholder: 'Add details about this task...',
    dueDate: 'Due Date (Optional)',
    dueDatePlaceholder: 'Select due date for dynamic range calculation',
    priority: 'Priority',
    difficulty: 'Difficulty',
    subtasks: 'Subtasks',
    smartGenerate: 'Smart Generate',
    addSubtask: 'Add a subtask...',
    createTask: 'Create & Schedule Task',
    updateTask: 'Update Task',
    save: 'Save',
    aiDetectedType: 'AI Detected Task Type',
    autoSchedule: 'AI Auto-Schedule',
    autoScheduleDesc: 'Automatically estimate duration and find the best time slot based on your availability, task priority, and deadline',
    schedulingMode: 'Scheduling Mode',
    startNextDay: 'Start Next Day',
    totalEstimatedTime: 'Total estimated time: {{minutes}} minutes ({{hours}} hours)',
    phaseDistribution: 'Learning Phase Distribution'
  },

  // Task Detail Screen
  taskDetail: {
    title: 'Task Details',
    startFocus: 'Start Focus',
    edit: 'Edit',
    delete: 'Delete',
    markComplete: 'Mark Complete',
    markIncomplete: 'Mark Incomplete',
    subtasks: 'Subtasks',
    progress: 'Progress',
    timeSpent: 'Time Spent',
    estimatedTime: 'Estimated Time',
    actualTime: 'Actual Time',
    notes: 'Notes',
    resources: 'Resources',
    dependencies: 'Dependencies',
    schedule: 'Schedule',
    reschedule: 'Reschedule'
  },
  
  // View modes
  viewMode: {
    day: 'Day',
    week: 'Week',
    month: 'Month'
  },

  // Focus Screen
  focus: {
    title: 'Focus Session',
    focusSession: 'Focus Session',
    focusTime: 'Focus Time',
    paused: 'Paused',
    readyToStart: 'Ready to Start',
    loadingTask: 'Loading task...',
    sessionComplete: 'Session Complete!',
    sessionCompleteMessage: 'Great job! Would you like to record what you learned?',
    skipFeedback: 'Skip',
    recordLearning: 'Record Learning',
    stopSession: 'Stop Session',
    stopSessionMessage: 'Are you sure you want to stop this focus session?',
    stopAndSave: 'Stop & Save',
    resetTimer: 'Reset Timer',
    resetTimerMessage: 'Are you sure you want to reset the timer?',
    reset: 'Reset',
    progress: 'Progress',
    timeSpent: 'Time Spent',
    remaining: 'Remaining',
    segment: 'Segment',
  },
  
  // Profile Screen
  profile: {
    title: 'Profile',
    notifications: 'Notifications',
    notificationsDesc: 'Enable Notifications',
    calendar: 'Calendar',
    calendarSync: 'Sync with Calendar',
    studySchedule: 'Study Schedule',
    availableTimeSlots: 'Available Time Slots',
    timeSlotsDesc: '{{hours}}h per week configured',
    autoScheduling: 'Auto-Scheduling',
    autoSchedulingDesc: 'Automatically schedule tasks in available slots',
    focusTimer: 'Focus Timer',
    defaultFocusDuration: 'Default Focus Duration',
    defaultBreakDuration: 'Default Break Duration',
    companion: 'Companion',
    companionType: 'Companion Type',
    companionTheme: 'Companion Theme',
    appearance: 'Appearance',
    language: 'Language',
    languageDesc: 'App Language',
    darkMode: 'Dark Mode',
    soundHaptics: 'Sound & Haptics',
    soundEffects: 'Sound Effects',
    vibration: 'Vibration',
    app: 'App',
    resetOnboarding: 'Reset Onboarding',
    version: 'FocusFlow v1.0.0',
    configure: 'Configure',
    account: 'Account',
    backup: 'Backup & Sync',
    privacy: 'Privacy',
    help: 'Help & Support'
  },

  // Language Options
  languages: {
    english: 'English',
    chinese: 'ÁπÅÈ´î‰∏≠Êñá'
  },

  // Priority Levels
  priority: {
    low: 'Low',
    medium: 'Medium',
    high: 'High',
    urgent: 'Urgent',
    critical: 'Critical'
  },

  // Difficulty Levels
  difficulty: {
    easy: 'Easy',
    medium: 'Medium',
    hard: 'Hard',
    expert: 'Expert'
  },

  // Task Categories
  categories: {
    work: 'Work',
    study: 'Study',
    personal: 'Personal',
    health: 'Health',
    hobby: 'Hobby',
    social: 'Social',
    finance: 'Finance',
    home: 'Home'
  },

  // Task Types
  taskTypes: {
    general: 'General Task',
    exam_preparation: 'Exam Preparation',
    skill_learning: 'Skill Learning',
    project_completion: 'Project Completion',
    habit_building: 'Habit Building',
    challenge: 'Challenge'
  },

  // Learning Phases
  phases: {
    knowledge: 'Knowledge',
    practice: 'Practice',
    application: 'Application',
    reflection: 'Reflection',
    output: 'Output',
    review: 'Review'
  },
  
  // Companion Types
  companionTypes: {
    plant: 'Plant',
    animal: 'Animal',
    landscape: 'Landscape'
  },
  
  // Companion Themes
  companionThemes: {
    forest: 'Forest',
    ocean: 'Ocean',
    space: 'Space',
    desert: 'Desert'
  },
  
  // Time Durations
  timeUnits: {
    minutes: '{{count}} min',
    hours: '{{count}}h',
    hourMinutes: '{{hours}}h {{minutes}}m',
    seconds: '{{count}} sec',
    days: '{{count}} days',
    weeks: '{{count}} weeks'
  },

  // Schedule
  schedule: {
    today: 'Today',
    tomorrow: 'Tomorrow',
    thisWeek: 'This Week',
    nextWeek: 'Next Week',
    noSchedule: 'No scheduled tasks',
    reschedule: 'Reschedule',
    timeSlot: 'Time Slot',
    duration: 'Duration',
    startTime: 'Start Time',
    endTime: 'End Time',
    day: 'Day',
    week: 'Week',
    month: 'Month',
    morning: 'Morning',
    afternoon: 'Afternoon',
    evening: 'Evening',
    scheduled: 'Scheduled',
    unscheduled: 'Unscheduled',
    hours: 'Hours'
  },

  // Onboarding
  onboarding: {
    welcome: 'Welcome to FocusFlow',
    getStarted: 'Get Started',
    skip: 'Skip',
    next: 'Next',
    complete: 'Complete Setup',
    step1Title: 'Welcome to FocusFlow',
    step1Desc: 'Your AI-powered productivity assistant that transforms vague tasks into clear, actionable subtasks.',
    step2Title: 'Create Your Account',
    step2Desc: 'Set up your account to personalize your experience and sync your data across devices securely.',
    step3Title: 'Configure Study Schedule',
    step3Desc: 'Configure your available time slots for each day. Our AI will use this to automatically schedule your tasks.',
    step4Title: 'Enable Notifications',
    step4Desc: 'Get intelligent reminders for upcoming tasks, focus sessions, and break times.',
    step5Title: 'Calendar Integration',
    step5Desc: 'Connect your calendar to analyze your free time and avoid scheduling conflicts.',
    step6Title: 'Ready to Start',
    step6Desc: 'Your personalized productivity workspace is ready. Start by creating your first task.'
  },

  // Modals
  modals: {
    personalization: {
      title: 'Help us personalize your plan',
      subtitle: 'Answer a few questions to get specific, actionable subtasks tailored to your needs',
      generatePlan: 'Generate Plan',
      cancel: 'Cancel',
      required: 'Required'
    },
    learningPlan: {
      title: 'Your Personalized Learning Plan',
      subtitle: 'A comprehensive plan based on your goals and preferences',
      achievableGoal: 'Achievable Goal',
      recommendedTools: 'Recommended Tools & Resources',
      progressCheckpoints: 'Progress Checkpoints',
      skillBreakdown: 'Skill Development Plan',
      generatedSubtasks: 'Generated Subtasks',
      gotIt: 'Got it!'
    },
    qualityAlert: {
      title: 'Help Us Personalize Your Plan',
      message: 'To generate the most effective subtasks with dynamic range calculation, we need a bit more information.',
      improve: 'Help me improve',
      skipForNow: 'Skip for now'
    }
  },

  // Messages and Notifications
  messages: {
    taskCreated: 'Task created successfully',
    taskUpdated: 'Task updated successfully',
    taskDeleted: 'Task deleted successfully',
    taskCompleted: 'Task completed!',
    sessionStarted: 'Focus session started',
    sessionPaused: 'Session paused',
    sessionCompleted: 'Session completed successfully',
    breakStarted: 'Break time started',
    dataSync: 'Data synchronized',
    errorOccurred: 'An error occurred',
    networkError: 'Network connection error',
    retry: 'Retry',
    dismiss: 'Dismiss'
  },
  
  // Alerts and Dialogs
  alerts: {
    notificationPermission: 'Notification Permission',
    notificationMessage: 'Please enable notifications in your device settings to receive reminders.',
    calendarPermission: 'Calendar Permission',
    calendarMessage: 'Please enable calendar access in your device settings to sync your tasks.',
    resetOnboardingTitle: 'Reset Onboarding',
    resetOnboardingMessage: 'Are you sure you want to reset the onboarding process? You will see the introduction screens again next time you open the app.',
    deleteTaskTitle: 'Delete Task',
    deleteTaskMessage: 'Are you sure you want to delete this task? This action cannot be undone.',
    cancel: 'Cancel',
    delete: 'Delete',
    reset: 'Reset',
    confirm: 'Confirm',
    ok: 'OK',
    yes: 'Yes',
    no: 'No',
    focusDurationTitle: 'Focus Duration',
    focusDurationMessage: 'Select default focus session duration',
    breakDurationTitle: 'Break Duration',
    breakDurationMessage: 'Select default break duration',
    companionTypeTitle: 'Companion Type',
    companionTypeMessage: 'Select your focus companion',
    companionThemeTitle: 'Companion Theme',
    companionThemeMessage: 'Select your companion theme',
    languageTitle: 'Change Language',
    languageMessage: 'Select your preferred language. All interface and task content will be translated.',
    languageChanged: 'Language Changed',
    languageChangedMessage: 'Interface and all task content have been translated to English.',
    translationWarning: 'Translation Warning',
    translationWarningMessage: 'Language changed but some task content may not have been translated. Please check your tasks.',
    restartRequired: 'Restart Required',
    restartRequiredMessage: 'Please restart the app to ensure all content is properly translated to your selected language.',
    autoRestartMessage: 'The app will restart automatically to complete the language change. Restart now?',
    manualRestartMessage: 'Please manually close and reopen the app to complete the language change.',
    restartNow: 'Restart Now'
  },
  
  // Time Slot Modal
  timeSlotModal: {
    title: 'Study Schedule',
    description: 'Set your available study times for each day of the week. The app will use these slots to automatically schedule your tasks and focus sessions.',
    close: 'Close',
    addTimeSlot: 'Add Time Slot',
    removeTimeSlot: 'Remove Time Slot',
    copyToAll: 'Copy to All Days',
    totalHours: 'Total Hours'
  },

  // Days of Week
  days: {
    monday: 'Monday',
    tuesday: 'Tuesday',
    wednesday: 'Wednesday',
    thursday: 'Thursday',
    friday: 'Friday',
    saturday: 'Saturday',
    sunday: 'Sunday',
    mon: 'Mon',
    tue: 'Tue',
    wed: 'Wed',
    thu: 'Thu',
    fri: 'Fri',
    sat: 'Sat',
    sun: 'Sun'
  },

  // Months
  months: {
    january: 'January',
    february: 'February',
    march: 'March',
    april: 'April',
    may: 'May',
    june: 'June',
    july: 'July',
    august: 'August',
    september: 'September',
    october: 'October',
    november: 'November',
    december: 'December',
    jan: 'Jan',
    feb: 'Feb',
    mar: 'Mar',
    apr: 'Apr',
    may_short: 'May',
    jun: 'Jun',
    jul: 'Jul',
    aug: 'Aug',
    sep: 'Sep',
    oct: 'Oct',
    nov: 'Nov',
    dec: 'Dec'
  },
  
  // Common
  common: {
    save: 'Save',
    cancel: 'Cancel',
    done: 'Done',
    edit: 'Edit',
    delete: 'Delete',
    add: 'Add',
    close: 'Close',
    start: 'Start',
    stop: 'Stop',
    pause: 'Pause',
    resume: 'Resume',
    continue: 'Continue',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    finish: 'Finish',
    complete: 'Complete',
    incomplete: 'Incomplete',
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    info: 'Information',
    search: 'Search',
    filter: 'Filter',
    sort: 'Sort',
    refresh: 'Refresh',
    update: 'Update',
    create: 'Create',
    select: 'Select',
    clear: 'Clear',
    apply: 'Apply',
    reset: 'Reset',
    settings: 'Settings',
    help: 'Help',
    about: 'About',
    part: 'Part',
    task: 'Task'
  },

  // Error Messages
  errors: {
    required: 'This field is required',
    invalid: 'Invalid input',
    networkError: 'Network connection error',
    serverError: 'Server error occurred',
    timeout: 'Request timeout',
    notFound: 'Not found',
    unauthorized: 'Unauthorized access',
    forbidden: 'Access forbidden',
    validationError: 'Validation error',
    unknownError: 'Unknown error occurred',
    taskNotFound: 'Task Not Found',
    taskNotFoundMessage: 'The selected task could not be found.',
    timerStartFailed: 'Failed to Start Timer',
    timerStartFailedMessage: 'Could not start the focus session. Please try again.',
    startTimerFailed: 'Failed to Start',
    startTimerFailedMessage: 'Could not start focus session. Please try again.',
    pauseTimerFailed: 'Failed to Pause',
    pauseTimerFailedMessage: 'Could not pause the timer.',
    resumeTimerFailed: 'Failed to Resume',
    resumeTimerFailedMessage: 'Could not resume the timer.',
    stopTimerFailed: 'Failed to Stop',
    stopTimerFailedMessage: 'Could not stop the timer.',
    resetTimerFailed: 'Failed to Reset',
    resetTimerFailedMessage: 'Could not reset the timer.',
  }
};

// ÁπÅÈ´î‰∏≠ÊñáÁøªË≠Ø
const zh = {
  // Tab Navigation
  tabs: {
    home: 'È¶ñÈ†Å',
    tasks: '‰ªªÂãô',
    stats: 'Áµ±Ë®à',
    profile: 'ÂÄã‰∫∫Ê™îÊ°à'
  },
  
  // Home Screen
  home: {
    title: '‰ªäÊó•Ë°åÁ®ã',
    welcome: 'Ê≠°ËøéÂõû‰æÜÔºÅ',
    noTasks: '‰ªäÊó•Ê≤íÊúâÂÆâÊéí‰ªªÂãô',
    addFirstTask: 'Êñ∞Â¢ûÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãô',
    todayProgress: '‰ªäÊó•ÈÄ≤Â∫¶',
    upcomingTasks: 'Âç≥Â∞áÂà∞‰æÜÁöÑ‰ªªÂãô',
    completedTasks: 'Â∑≤ÂÆåÊàê‰ªªÂãô'
  },

  // Tasks Screen
  tasks: {
    title: '‰ªªÂãô',
    allTasks: 'ÊâÄÊúâ‰ªªÂãô',
    pending: 'ÂæÖÂÆåÊàê',
    completed: 'Â∑≤ÂÆåÊàê',
    overdue: 'Â∑≤ÈÄæÊúü',
    addTask: 'Êñ∞Â¢û‰ªªÂãô',
    noTasks: 'Êâæ‰∏çÂà∞‰ªªÂãô',
    createFirst: 'Âª∫Á´ãÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãô‰ª•ÈñãÂßã‰ΩøÁî®',
    schedule: 'ÊéíÁ®ã',
    filters: 'ÁØ©ÈÅ∏',
    sortBy: 'ÊéíÂ∫èÊñπÂºè',
    dueDate: 'Êà™Ê≠¢Êó•Êúü',
    priority: 'ÂÑ™ÂÖàÁ¥ö',
    difficulty: 'Èõ£Â∫¶',
    category: 'ÂàÜÈ°û',
    weekView: 'ÈÄ±Ê™¢Ë¶ñ',
    listView: 'Ê∏ÖÂñÆÊ™¢Ë¶ñ',
    noScheduledTasks: 'Ê≤íÊúâÊéíÁ®ã‰ªªÂãô',
    rescheduled: '‰ªªÂãôÂ∑≤ÊàêÂäüÈáçÊñ∞ÊéíÁ®ã',
    rescheduleError: 'ÈáçÊñ∞ÊéíÁ®ã‰ªªÂãôÂ§±Êïó',
    aiRescheduleSuccess: 'ü§ñ AI ÈáçÊñ∞ÊéíÁ®ãÊàêÂäü',
    aiRescheduleFailure: '‚ùå ÁÑ°Ê≥ïÈáçÊñ∞ÊéíÁ®ã',
    viewSuggestions: 'Êü•ÁúãÂª∫Ë≠∞',
    optimizationSuggestions: 'ÂÑ™ÂåñÂª∫Ë≠∞',
    extendDeadline: 'Âª∂Èï∑Êà™Ê≠¢Êó•Êúü',
    originalTime: 'ÂéüÊôÇÈñì',
    newTime: 'Êñ∞ÊôÇÈñì',
    suggestions: 'Âª∫Ë≠∞Ôºö',
    systemError: 'Á≥ªÁµ±ÈåØË™§',
    rescheduleErrorMessage: 'ÈáçÊñ∞ÊéíÁ®ãÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ',
    durationCompressionWarning: '‚ö†Ô∏è ÊôÇÈñìÂ£ìÁ∏ÆË≠¶Âëä',
    taskTooLong: '‰ªªÂãôÊôÇÈñìË∂ÖÂá∫ÂèØÁî®ÊôÇÊÆµ',
    splitTaskRecommendation: 'Âª∫Ë≠∞Â∞áÊ≠§‰ªªÂãôÂàÜÂâ≤ÁÇ∫ËºÉÂ∞èÁöÑÁâáÊÆµ',
    durationValidationFailed: 'ÊôÇÈñìÈ©óË≠âÂ§±Êïó',
    usingOriginalDuration: '‰ΩøÁî®ÂéüÂßãÈ†ê‰º∞ÊôÇÈñì'
  },

  // Stats Screen
  stats: {
    title: 'Áµ±Ë®à',
    daily: 'ÊØèÊó•',
    weekly: 'ÊØèÈÄ±',
    monthly: 'ÊØèÊúà',
    focusTime: 'Â∞àÊ≥®ÊôÇÈñì',
    tasksCompleted: 'Â∑≤ÂÆåÊàê‰ªªÂãô',
    distractions: 'ÂàÜÂøÉÊ¨°Êï∏',
    sessions: 'Â∞àÊ≥®ÊôÇÊÆµ',
    todayProgress: '‰ªäÊó•ÈÄ≤Â∫¶',
    productivityTips: 'ÁîüÁî¢ÂäõÂª∫Ë≠∞',
    generate: 'ÁîüÊàê',
    insights: 'Ê∑±Â∫¶ÂàÜÊûê',
    streaks: 'ÈÄ£Á∫åÁ¥ÄÈåÑ',
    goals: 'ÁõÆÊ®ô',
    achievements: 'ÊàêÂ∞±'
  },

  // Add Task Screen
  addTask: {
    title: 'Êñ∞Â¢û‰ªªÂãô',
    editTitle: 'Á∑®ËºØ‰ªªÂãô',
    taskTitle: '‰ªªÂãôÊ®ôÈ°å',
    taskTitlePlaceholder: 'ÊÇ®ÈúÄË¶ÅÂÆåÊàê‰ªÄÈ∫ºÔºü',
    description: 'ÊèèËø∞ÔºàÈÅ∏Â°´Ôºâ',
    descriptionPlaceholder: 'Êñ∞Â¢ûÈóúÊñºÊ≠§‰ªªÂãôÁöÑË©≥Á¥∞Ë≥áË®ä...',
    dueDate: 'Êà™Ê≠¢Êó•ÊúüÔºàÈÅ∏Â°´Ôºâ',
    dueDatePlaceholder: 'ÈÅ∏ÊìáÊà™Ê≠¢Êó•Êúü‰ª•ÈÄ≤Ë°åÂãïÊÖãÁØÑÂúçË®àÁÆó',
    priority: 'ÂÑ™ÂÖàÁ¥ö',
    difficulty: 'Èõ£Â∫¶',
    subtasks: 'Â≠ê‰ªªÂãô',
    smartGenerate: 'Êô∫ËÉΩÁîüÊàê',
    addSubtask: 'Êñ∞Â¢ûÂ≠ê‰ªªÂãô...',
    createTask: 'Âª∫Á´ã‰∏¶ÊéíÁ®ã‰ªªÂãô',
    updateTask: 'Êõ¥Êñ∞‰ªªÂãô',
    save: 'ÂÑ≤Â≠ò',
    aiDetectedType: 'AI ÂÅµÊ∏¨‰ªªÂãôÈ°ûÂûã',
    autoSchedule: 'AI Ëá™ÂãïÊéíÁ®ã',
    autoScheduleDesc: 'Ê†πÊìöÊÇ®ÁöÑÂèØÁî®ÊôÇÈñì„ÄÅ‰ªªÂãôÂÑ™ÂÖàÁ¥öÂíåÊà™Ê≠¢Êó•ÊúüËá™Âãï‰º∞ÁÆóÊôÇÈï∑‰∏¶ÊâæÂà∞ÊúÄ‰Ω≥ÊôÇÈñìÊÆµ',
    schedulingMode: 'ÊéíÁ®ãÊ®°Âºè',
    startNextDay: 'ÂæûÈöîÂ§©ÈñãÂßã',
    totalEstimatedTime: 'È†ê‰º∞Á∏ΩÊôÇÈñìÔºö{{minutes}} ÂàÜÈêòÔºà{{hours}} Â∞èÊôÇÔºâ',
    phaseDistribution: 'Â≠∏ÁøíÈöéÊÆµÂàÜ‰Ωà'
  },

  // Task Detail Screen
  taskDetail: {
    title: '‰ªªÂãôË©≥ÊÉÖ',
    startFocus: 'ÈñãÂßãÂ∞àÊ≥®',
    edit: 'Á∑®ËºØ',
    delete: 'Âà™Èô§',
    markComplete: 'Ê®ôË®òÁÇ∫ÂÆåÊàê',
    markIncomplete: 'Ê®ôË®òÁÇ∫Êú™ÂÆåÊàê',
    subtasks: 'Â≠ê‰ªªÂãô',
    progress: 'ÈÄ≤Â∫¶',
    timeSpent: 'Â∑≤Ëä±Ë≤ªÊôÇÈñì',
    estimatedTime: 'È†ê‰º∞ÊôÇÈñì',
    actualTime: 'ÂØ¶ÈöõÊôÇÈñì',
    notes: 'Á≠ÜË®ò',
    resources: 'Ë≥áÊ∫ê',
    dependencies: '‰æùË≥¥È†ÖÁõÆ',
    schedule: 'ÊéíÁ®ã',
    reschedule: 'ÈáçÊñ∞ÊéíÁ®ã'
  },
  
  // View modes
  viewMode: {
    day: 'Êó•',
    week: 'ÈÄ±',
    month: 'Êúà'
  },

  // Focus Screen
  focus: {
    title: 'Â∞àÊ≥®ÊôÇÈñì',
    focusSession: 'Â∞àÊ≥®ÊôÇÈñì',
    focusTime: 'Â∞àÊ≥®‰∏≠',
    paused: 'Â∑≤Êö´ÂÅú',
    readyToStart: 'Ê∫ñÂÇôÈñãÂßã',
    loadingTask: 'ËºâÂÖ•‰ªªÂãô‰∏≠...',
    sessionComplete: 'ÂÆåÊàêÂ∞àÊ≥®ÊôÇÈñìÔºÅ',
    sessionCompleteMessage: 'ÂÅöÂæóÂæàÂ•ΩÔºÅÊÇ®ÊÉ≥Ë®òÈåÑÂ≠∏Âà∞ÁöÑÂÖßÂÆπÂóéÔºü',
    skipFeedback: 'Ë∑≥ÈÅé',
    recordLearning: 'Ë®òÈåÑÂ≠∏Áøí',
    stopSession: 'ÂÅúÊ≠¢Â∞àÊ≥®',
    stopSessionMessage: 'ÊÇ®Á¢∫ÂÆöË¶ÅÂÅúÊ≠¢ÈÄôÊ¨°Â∞àÊ≥®ÊôÇÈñìÂóéÔºü',
    stopAndSave: 'ÂÅúÊ≠¢‰∏¶ÂÑ≤Â≠ò',
    resetTimer: 'ÈáçÁΩÆË®àÊôÇÂô®',
    resetTimerMessage: 'ÊÇ®Á¢∫ÂÆöË¶ÅÈáçÁΩÆË®àÊôÇÂô®ÂóéÔºü',
    reset: 'ÈáçÁΩÆ',
    progress: 'ÈÄ≤Â∫¶',
    timeSpent: 'Â∑≤Ëä±Ë≤ªÊôÇÈñì',
    remaining: 'Ââ©È§òÊôÇÈñì',
    segment: 'ÁâáÊÆµ',
  },
  
  // Profile Screen
  profile: {
    title: 'ÂÄã‰∫∫Ê™îÊ°à',
    notifications: 'ÈÄöÁü•',
    notificationsDesc: 'ÂïüÁî®ÈÄöÁü•',
    calendar: 'Ë°å‰∫ãÊõÜ',
    calendarSync: 'ÂêåÊ≠•Ë°å‰∫ãÊõÜ',
    studySchedule: 'Â≠∏ÁøíÊôÇÁ®ã',
    availableTimeSlots: 'ÂèØÁî®ÊôÇÈñìÊÆµ',
    timeSlotsDesc: 'ÊØèÈÄ±Â∑≤ÈÖçÁΩÆ {{hours}} Â∞èÊôÇ',
    autoScheduling: 'Ëá™ÂãïÊéíÁ®ã',
    autoSchedulingDesc: 'Âú®ÂèØÁî®ÊôÇÈñìÊÆµËá™ÂãïÂÆâÊéí‰ªªÂãô',
    focusTimer: 'Â∞àÊ≥®Ë®àÊôÇÂô®',
    defaultFocusDuration: 'È†êË®≠Â∞àÊ≥®ÊôÇÈï∑',
    defaultBreakDuration: 'È†êË®≠‰ºëÊÅØÊôÇÈï∑',
    companion: 'Èô™‰º¥Â§•‰º¥',
    companionType: 'Â§•‰º¥È°ûÂûã',
    companionTheme: 'Â§•‰º¥‰∏ªÈ°å',
    appearance: 'Â§ñËßÄ',
    language: 'Ë™ûË®Ä',
    languageDesc: 'ÊáâÁî®Á®ãÂºèË™ûË®Ä',
    darkMode: 'Ê∑±Ëâ≤Ê®°Âºè',
    soundHaptics: 'ËÅ≤Èü≥ÂíåËß∏Ë¶∫ÂõûÈ•ã',
    soundEffects: 'Èü≥Êïà',
    vibration: 'ÊåØÂãï',
    app: 'ÊáâÁî®Á®ãÂºè',
    resetOnboarding: 'ÈáçÁΩÆÂºïÂ∞é',
    version: 'FocusFlow v1.0.0',
    configure: 'ÈÖçÁΩÆ',
    account: 'Â∏≥Êà∂',
    backup: 'ÂÇô‰ªΩËàáÂêåÊ≠•',
    privacy: 'Èö±ÁßÅ',
    help: 'Âπ´Âä©ËàáÊîØÊè¥'
  },

  // Language Options
  languages: {
    english: 'English',
    chinese: 'ÁπÅÈ´î‰∏≠Êñá'
  },

  // Priority Levels
  priority: {
    low: '‰Ωé',
    medium: '‰∏≠',
    high: 'È´ò',
    urgent: 'Á∑äÊÄ•',
    critical: 'ÈóúÈçµ'
  },

  // Difficulty Levels
  difficulty: {
    easy: 'Á∞°ÂñÆ',
    medium: '‰∏≠Á≠â',
    hard: 'Âõ∞Èõ£',
    expert: 'Â∞àÂÆ∂'
  },

  // Task Categories
  categories: {
    work: 'Â∑•‰Ωú',
    study: 'Â≠∏Áøí',
    personal: 'ÂÄã‰∫∫',
    health: 'ÂÅ•Â∫∑',
    hobby: 'ËààË∂£',
    social: 'Á§æ‰∫§',
    finance: 'Ë≤°Âãô',
    home: 'ÂÆ∂Â∫≠'
  },

  // Task Types
  taskTypes: {
    general: '‰∏ÄËà¨‰ªªÂãô',
    exam_preparation: 'ËÄÉË©¶Ê∫ñÂÇô',
    skill_learning: 'ÊäÄËÉΩÂ≠∏Áøí',
    project_completion: 'Â∞àÊ°àÂÆåÊàê',
    habit_building: 'ÁøíÊÖ£ÂüπÈ§ä',
    challenge: 'ÊåëÊà∞'
  },

  // Learning Phases
  phases: {
    knowledge: 'Áü•Ë≠ò',
    practice: 'Á∑¥Áøí',
    application: 'ÊáâÁî®',
    reflection: 'ÂèçÊÄù',
    output: 'Ëº∏Âá∫',
    review: 'Ë§áÁøí'
  },
  
  // Companion Types
  companionTypes: {
    plant: 'Ê§çÁâ©',
    animal: 'ÂãïÁâ©',
    landscape: 'È¢®ÊôØ'
  },
  
  // Companion Themes
  companionThemes: {
    forest: 'Ê£ÆÊûó',
    ocean: 'Êµ∑Ê¥ã',
    space: 'Â§™Á©∫',
    desert: 'Ê≤ôÊº†'
  },
  
  // Time Durations
  timeUnits: {
    minutes: '{{count}} ÂàÜÈêò',
    hours: '{{count}} Â∞èÊôÇ',
    hourMinutes: '{{hours}} Â∞èÊôÇ {{minutes}} ÂàÜÈêò',
    seconds: '{{count}} Áßí',
    days: '{{count}} Â§©',
    weeks: '{{count}} ÈÄ±'
  },

  // Schedule
  schedule: {
    today: '‰ªäÂ§©',
    tomorrow: 'ÊòéÂ§©',
    thisWeek: 'Êú¨ÈÄ±',
    nextWeek: '‰∏ãÈÄ±',
    noSchedule: 'Ê≤íÊúâÊéíÁ®ã‰ªªÂãô',
    reschedule: 'ÈáçÊñ∞ÊéíÁ®ã',
    timeSlot: 'ÊôÇÈñìÊÆµ',
    duration: 'ÊôÇÈï∑',
    startTime: 'ÈñãÂßãÊôÇÈñì',
    endTime: 'ÁµêÊùüÊôÇÈñì',
    day: 'Êó•',
    week: 'ÈÄ±',
    month: 'Êúà',
    morning: '‰∏äÂçà',
    afternoon: '‰∏ãÂçà',
    evening: 'Êôö‰∏ä',
    scheduled: 'Â∑≤ÊéíÁ®ã',
    unscheduled: 'Êú™ÊéíÁ®ã',
    hours: 'Â∞èÊôÇ'
  },

  // Onboarding
  onboarding: {
    welcome: 'Ê≠°Ëøé‰ΩøÁî® FocusFlow',
    getStarted: 'ÈñãÂßã‰ΩøÁî®',
    skip: 'Ë∑≥ÈÅé',
    next: '‰∏ã‰∏ÄÊ≠•',
    complete: 'ÂÆåÊàêË®≠ÂÆö',
    step1Title: 'Ê≠°Ëøé‰ΩøÁî® FocusFlow',
    step1Desc: 'ÊÇ®ÁöÑ AI È©ÖÂãïÁîüÁî¢ÂäõÂä©ÊâãÔºåÂ∞áÊ®°Á≥äÁöÑ‰ªªÂãôËΩâÂåñÁÇ∫Ê∏ÖÊô∞„ÄÅÂèØÂü∑Ë°åÁöÑÂ≠ê‰ªªÂãô„ÄÇ',
    step2Title: 'Âª∫Á´ãÊÇ®ÁöÑÂ∏≥Êà∂',
    step2Desc: 'Ë®≠ÂÆöÊÇ®ÁöÑÂ∏≥Êà∂‰ª•ÂÄã‰∫∫ÂåñÊÇ®ÁöÑÈ´îÈ©óÔºå‰∏¶Âú®Ë£ùÁΩÆÈñìÂÆâÂÖ®Âú∞ÂêåÊ≠•ÊÇ®ÁöÑË≥áÊñô„ÄÇ',
    step3Title: 'ÈÖçÁΩÆÂ≠∏ÁøíÊôÇÁ®ã',
    step3Desc: 'ÈÖçÁΩÆÊÇ®ÊØèÂ§©ÁöÑÂèØÁî®ÊôÇÈñìÊÆµ„ÄÇÊàëÂÄëÁöÑ AI Â∞á‰ΩøÁî®ÈÄô‰∫õË≥áË®äËá™ÂãïÂÆâÊéíÊÇ®ÁöÑ‰ªªÂãô„ÄÇ',
    step4Title: 'ÂïüÁî®ÈÄöÁü•',
    step4Desc: 'Áç≤ÂæóÂç≥Â∞áÂà∞‰æÜÁöÑ‰ªªÂãô„ÄÅÂ∞àÊ≥®ÊôÇÊÆµÂíå‰ºëÊÅØÊôÇÈñìÁöÑÊô∫ËÉΩÊèêÈÜí„ÄÇ',
    step5Title: 'Ë°å‰∫ãÊõÜÊï¥Âêà',
    step5Desc: 'ÈÄ£Êé•ÊÇ®ÁöÑË°å‰∫ãÊõÜ‰ª•ÂàÜÊûêÊÇ®ÁöÑÁ©∫ÈñíÊôÇÈñì‰∏¶ÈÅøÂÖçÊéíÁ®ãË°ùÁ™Å„ÄÇ',
    step6Title: 'Ê∫ñÂÇôÈñãÂßã',
    step6Desc: 'ÊÇ®ÁöÑÂÄã‰∫∫ÂåñÁîüÁî¢ÂäõÂ∑•‰ΩúÂçÄÂ∑≤Ê∫ñÂÇôÂ∞±Á∑í„ÄÇÂÖàÂª∫Á´ãÊÇ®ÁöÑÁ¨¨‰∏ÄÂÄã‰ªªÂãôÈñãÂßãÂêß„ÄÇ'
  },

  // Modals
  modals: {
    personalization: {
      title: 'Âπ´Âä©ÊàëÂÄëÂÄã‰∫∫ÂåñÊÇ®ÁöÑË®àÂäÉ',
      subtitle: 'ÂõûÁ≠îÂπæÂÄãÂïèÈ°å‰ª•Áç≤ÂæóÈáùÂ∞çÊÇ®ÈúÄÊ±ÇÈáèË∫´ÂÆöÂà∂ÁöÑÂÖ∑È´î„ÄÅÂèØÂü∑Ë°åÁöÑÂ≠ê‰ªªÂãô',
      generatePlan: 'ÁîüÊàêË®àÂäÉ',
      cancel: 'ÂèñÊ∂à',
      required: 'ÂøÖÂ°´'
    },
    learningPlan: {
      title: 'ÊÇ®ÁöÑÂÄã‰∫∫ÂåñÂ≠∏ÁøíË®àÂäÉ',
      subtitle: 'Âü∫ÊñºÊÇ®ÁöÑÁõÆÊ®ôÂíåÂÅèÂ•ΩÁöÑÁ∂úÂêàË®àÂäÉ',
      achievableGoal: 'ÂèØÂØ¶ÁèæÁõÆÊ®ô',
      recommendedTools: 'Êé®Ëñ¶Â∑•ÂÖ∑ËàáË≥áÊ∫ê',
      progressCheckpoints: 'ÈÄ≤Â∫¶Ê™¢Êü•Èªû',
      skillBreakdown: 'ÊäÄËÉΩÁôºÂ±ïË®àÂäÉ',
      generatedSubtasks: 'ÁîüÊàêÁöÑÂ≠ê‰ªªÂãô',
      gotIt: '‰∫ÜËß£ÔºÅ'
    },
    qualityAlert: {
      title: 'Âπ´Âä©ÊàëÂÄëÂÄã‰∫∫ÂåñÊÇ®ÁöÑË®àÂäÉ',
      message: 'ÁÇ∫‰∫ÜÁîüÊàêÊúÄÊúâÊïàÁöÑÂ≠ê‰ªªÂãô‰∏¶ÈÄ≤Ë°åÂãïÊÖãÁØÑÂúçË®àÁÆóÔºåÊàëÂÄëÈúÄË¶ÅÊõ¥Â§öË≥áË®ä„ÄÇ',
      improve: 'Âπ´Âä©ÊàëÊîπÂñÑ',
      skipForNow: 'Êö´ÊôÇË∑≥ÈÅé'
    }
  },

  // Messages and Notifications
  messages: {
    taskCreated: '‰ªªÂãôÂª∫Á´ãÊàêÂäü',
    taskUpdated: '‰ªªÂãôÊõ¥Êñ∞ÊàêÂäü',
    taskDeleted: '‰ªªÂãôÂà™Èô§ÊàêÂäü',
    taskCompleted: '‰ªªÂãôÂÆåÊàêÔºÅ',
    sessionStarted: 'Â∞àÊ≥®ÊôÇÊÆµÂ∑≤ÈñãÂßã',
    sessionPaused: 'ÊôÇÊÆµÂ∑≤Êö´ÂÅú',
    sessionCompleted: 'ÊôÇÊÆµÊàêÂäüÂÆåÊàê',
    breakStarted: '‰ºëÊÅØÊôÇÈñìÈñãÂßã',
    dataSync: 'Ë≥áÊñôÂ∑≤ÂêåÊ≠•',
    errorOccurred: 'ÁôºÁîüÈåØË™§',
    networkError: 'Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§',
    retry: 'ÈáçË©¶',
    dismiss: 'ÈóúÈñâ'
  },
  
  // Alerts and Dialogs
  alerts: {
    notificationPermission: 'ÈÄöÁü•Ê¨äÈôê',
    notificationMessage: 'Ë´ãÂú®Ë£ùÁΩÆË®≠ÂÆö‰∏≠ÂïüÁî®ÈÄöÁü•‰ª•Êé•Êî∂ÊèêÈÜí„ÄÇ',
    calendarPermission: 'Ë°å‰∫ãÊõÜÊ¨äÈôê',
    calendarMessage: 'Ë´ãÂú®Ë£ùÁΩÆË®≠ÂÆö‰∏≠ÂïüÁî®Ë°å‰∫ãÊõÜÂ≠òÂèñ‰ª•ÂêåÊ≠•ÊÇ®ÁöÑ‰ªªÂãô„ÄÇ',
    resetOnboardingTitle: 'ÈáçÁΩÆÂºïÂ∞é',
    resetOnboardingMessage: 'ÊÇ®Á¢∫ÂÆöË¶ÅÈáçÁΩÆÂºïÂ∞éÊµÅÁ®ãÂóéÔºü‰∏ãÊ¨°ÈñãÂïüÊáâÁî®Á®ãÂºèÊôÇÊúÉÂÜçÊ¨°È°ØÁ§∫‰ªãÁ¥πÁï´Èù¢„ÄÇ',
    deleteTaskTitle: 'Âà™Èô§‰ªªÂãô',
    deleteTaskMessage: 'ÊÇ®Á¢∫ÂÆöË¶ÅÂà™Èô§Ê≠§‰ªªÂãôÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÂæ©Âéü„ÄÇ',
    cancel: 'ÂèñÊ∂à',
    delete: 'Âà™Èô§',
    reset: 'ÈáçÁΩÆ',
    confirm: 'Á¢∫Ë™ç',
    ok: 'Á¢∫ÂÆö',
    yes: 'ÊòØ',
    no: 'Âê¶',
    focusDurationTitle: 'Â∞àÊ≥®ÊôÇÈï∑',
    focusDurationMessage: 'ÈÅ∏ÊìáÈ†êË®≠Â∞àÊ≥®ÊôÇÈï∑',
    breakDurationTitle: '‰ºëÊÅØÊôÇÈï∑',
    breakDurationMessage: 'ÈÅ∏ÊìáÈ†êË®≠‰ºëÊÅØÊôÇÈï∑',
    companionTypeTitle: 'Â§•‰º¥È°ûÂûã',
    companionTypeMessage: 'ÈÅ∏ÊìáÊÇ®ÁöÑÂ∞àÊ≥®Â§•‰º¥',
    companionThemeTitle: 'Â§•‰º¥‰∏ªÈ°å',
    companionThemeMessage: 'ÈÅ∏ÊìáÊÇ®ÁöÑÂ§•‰º¥‰∏ªÈ°å',
    languageTitle: 'ËÆäÊõ¥Ë™ûË®Ä',
    languageMessage: 'ÈÅ∏ÊìáÊÇ®ÂÅèÂ•ΩÁöÑË™ûË®Ä„ÄÇÊâÄÊúâ‰ªãÈù¢Âíå‰ªªÂãôÂÖßÂÆπÈÉΩÂ∞áË¢´ÁøªË≠Ø„ÄÇ',
    languageChanged: 'Ë™ûË®ÄÂ∑≤ËÆäÊõ¥',
    languageChangedMessage: '‰ªãÈù¢ÂíåÊâÄÊúâ‰ªªÂãôÂÖßÂÆπÂ∑≤ÁøªË≠ØÊàêÁπÅÈ´î‰∏≠Êñá„ÄÇ',
    translationWarning: 'ÁøªË≠ØË≠¶Âëä',
    translationWarningMessage: 'Ë™ûË®ÄÂ∑≤ËÆäÊõ¥Ôºå‰ΩÜÈÉ®ÂàÜ‰ªªÂãôÂÖßÂÆπÂèØËÉΩÂ∞öÊú™ÁøªË≠Ø„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑ‰ªªÂãô„ÄÇ',
    restartRequired: 'ÈúÄË¶ÅÈáçÂïü',
    restartRequiredMessage: 'Ë´ãÈáçÂïüÊáâÁî®Á®ãÂºè‰ª•Á¢∫‰øùÊâÄÊúâÂÖßÂÆπÈÉΩÊ≠£Á¢∫ÁøªË≠ØÁÇ∫ÊÇ®ÈÅ∏ÊìáÁöÑË™ûË®Ä„ÄÇ',
    autoRestartMessage: 'ÊáâÁî®Á®ãÂºèÂ∞áËá™ÂãïÈáçÂïü‰ª•ÂÆåÊàêË™ûË®ÄËÆäÊõ¥„ÄÇÁ´ãÂç≥ÈáçÂïüÔºü',
    manualRestartMessage: 'Ë´ãÊâãÂãïÈóúÈñâ‰∏¶ÈáçÊñ∞ÈñãÂïüÊáâÁî®Á®ãÂºè‰ª•ÂÆåÊàêË™ûË®ÄËÆäÊõ¥„ÄÇ',
    restartNow: 'Á´ãÂç≥ÈáçÂïü'
  },
  
  // Time Slot Modal
  timeSlotModal: {
    title: 'Â≠∏ÁøíÊôÇÁ®ã',
    description: 'Ë®≠ÂÆöÊÇ®ÊØèÈÄ±ÊØèÂ§©ÁöÑÂèØÁî®Â≠∏ÁøíÊôÇÈñì„ÄÇÊáâÁî®Á®ãÂºèÂ∞á‰ΩøÁî®ÈÄô‰∫õÊôÇÈñìÊÆµËá™ÂãïÂÆâÊéíÊÇ®ÁöÑ‰ªªÂãôÂíåÂ∞àÊ≥®ÊôÇÈñì„ÄÇ',
    close: 'ÈóúÈñâ',
    addTimeSlot: 'Êñ∞Â¢ûÊôÇÈñìÊÆµ',
    removeTimeSlot: 'ÁßªÈô§ÊôÇÈñìÊÆµ',
    copyToAll: 'Ë§áË£ΩÂà∞ÊâÄÊúâÂ§©',
    totalHours: 'Á∏ΩÊôÇÊï∏'
  },

  // Days of Week
  days: {
    monday: 'ÊòüÊúü‰∏Ä',
    tuesday: 'ÊòüÊúü‰∫å',
    wednesday: 'ÊòüÊúü‰∏â',
    thursday: 'ÊòüÊúüÂõõ',
    friday: 'ÊòüÊúü‰∫î',
    saturday: 'ÊòüÊúüÂÖ≠',
    sunday: 'ÊòüÊúüÊó•',
    mon: '‰∏Ä',
    tue: '‰∫å',
    wed: '‰∏â',
    thu: 'Âõõ',
    fri: '‰∫î',
    sat: 'ÂÖ≠',
    sun: 'Êó•'
  },

  // Months
  months: {
    january: '‰∏ÄÊúà',
    february: '‰∫åÊúà',
    march: '‰∏âÊúà',
    april: 'ÂõõÊúà',
    may: '‰∫îÊúà',
    june: 'ÂÖ≠Êúà',
    july: '‰∏ÉÊúà',
    august: 'ÂÖ´Êúà',
    september: '‰πùÊúà',
    october: 'ÂçÅÊúà',
    november: 'ÂçÅ‰∏ÄÊúà',
    december: 'ÂçÅ‰∫åÊúà',
    jan: '1Êúà',
    feb: '2Êúà',
    mar: '3Êúà',
    apr: '4Êúà',
    may_short: '5Êúà',
    jun: '6Êúà',
    jul: '7Êúà',
    aug: '8Êúà',
    sep: '9Êúà',
    oct: '10Êúà',
    nov: '11Êúà',
    dec: '12Êúà'
  },
  
  // Common
  common: {
    save: 'ÂÑ≤Â≠ò',
    cancel: 'ÂèñÊ∂à',
    done: 'ÂÆåÊàê',
    edit: 'Á∑®ËºØ',
    delete: 'Âà™Èô§',
    add: 'Êñ∞Â¢û',
    close: 'ÈóúÈñâ',
    start: 'ÈñãÂßã',
    stop: 'ÂÅúÊ≠¢',
    pause: 'Êö´ÂÅú',
    resume: 'ÁπºÁ∫å',
    continue: 'ÁπºÁ∫å',
    back: 'ËøîÂõû',
    next: '‰∏ã‰∏ÄÊ≠•',
    previous: '‰∏ä‰∏ÄÊ≠•',
    finish: 'ÂÆåÊàê',
    complete: 'ÂÆåÊàê',
    incomplete: 'Êú™ÂÆåÊàê',
    loading: 'ËºâÂÖ•‰∏≠...',
    error: 'ÈåØË™§',
    success: 'ÊàêÂäü',
    warning: 'Ë≠¶Âëä',
    info: 'Ë≥áË®ä',
    search: 'ÊêúÂ∞ã',
    filter: 'ÁØ©ÈÅ∏',
    sort: 'ÊéíÂ∫è',
    refresh: 'ÈáçÊñ∞Êï¥ÁêÜ',
    update: 'Êõ¥Êñ∞',
    create: 'Âª∫Á´ã',
    select: 'ÈÅ∏Êìá',
    clear: 'Ê∏ÖÈô§',
    apply: 'Â•óÁî®',
    reset: 'ÈáçÁΩÆ',
    settings: 'Ë®≠ÂÆö',
    help: 'Âπ´Âä©',
    about: 'ÈóúÊñº',
    part: 'ÈÉ®ÂàÜ',
    task: '‰ªªÂãô'
  },

  // Error Messages
  errors: {
    required: 'Ê≠§Ê¨Ñ‰ΩçÁÇ∫ÂøÖÂ°´',
    invalid: 'ÁÑ°ÊïàËº∏ÂÖ•',
    networkError: 'Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§',
    serverError: '‰º∫ÊúçÂô®ÈåØË™§',
    timeout: 'Ë´ãÊ±ÇÈÄæÊôÇ',
    notFound: 'Êâæ‰∏çÂà∞',
    unauthorized: 'Êú™ÊéàÊ¨äÂ≠òÂèñ',
    forbidden: 'Â≠òÂèñË¢´Á¶ÅÊ≠¢',
    validationError: 'È©óË≠âÈåØË™§',
    unknownError: 'ÁôºÁîüÊú™Áü•ÈåØË™§',
    taskNotFound: 'Êâæ‰∏çÂà∞‰ªªÂãô',
    taskNotFoundMessage: 'Êâæ‰∏çÂà∞ÊâÄÈÅ∏ÁöÑ‰ªªÂãô„ÄÇ',
    timerStartFailed: 'ÁÑ°Ê≥ïÂïüÂãïË®àÊôÇÂô®',
    timerStartFailedMessage: 'ÁÑ°Ê≥ïÈñãÂßãÂ∞àÊ≥®ÊôÇÈñìÔºåË´ãÈáçË©¶„ÄÇ',
    startTimerFailed: 'ÂïüÂãïÂ§±Êïó',
    startTimerFailedMessage: 'ÁÑ°Ê≥ïÈñãÂßãÂ∞àÊ≥®ÊôÇÈñìÔºåË´ãÈáçË©¶„ÄÇ',
    pauseTimerFailed: 'Êö´ÂÅúÂ§±Êïó',
    pauseTimerFailedMessage: 'ÁÑ°Ê≥ïÊö´ÂÅúË®àÊôÇÂô®„ÄÇ',
    resumeTimerFailed: 'ÁπºÁ∫åÂ§±Êïó',
    resumeTimerFailedMessage: 'ÁÑ°Ê≥ïÁπºÁ∫åË®àÊôÇÂô®„ÄÇ',
    stopTimerFailed: 'ÂÅúÊ≠¢Â§±Êïó',
    stopTimerFailedMessage: 'ÁÑ°Ê≥ïÂÅúÊ≠¢Ë®àÊôÇÂô®„ÄÇ',
    resetTimerFailed: 'ÈáçÁΩÆÂ§±Êïó',
    resetTimerFailedMessage: 'ÁÑ°Ê≥ïÈáçÁΩÆË®àÊôÇÂô®„ÄÇ',
  }
};

const resources = {
  en: {
    translation: en
  },
  zh: {
    translation: zh
  }
};

// Async initialization function
const initializeI18n = async () => {
  try {
    // Try to get saved language preference from AsyncStorage
    const savedLanguage = await AsyncStorage.getItem('user-language');
    
    // Determine initial language
    let initialLanguage = 'en';
    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'zh')) {
      initialLanguage = savedLanguage;
    } else {
      // Fallback to system locale detection
      const systemLocale = Localization.getLocales()?.[0]?.languageCode || 'en';
      initialLanguage = systemLocale.startsWith('zh') ? 'zh' : 'en';
    }

    await i18n
      .use(initReactI18next)
      .init({
        resources,
        lng: initialLanguage,
        fallbackLng: ['en'], // Array format as required
        
        interpolation: {
          escapeValue: false
        },
        
        react: {
          useSuspense: false
        }
      });

    console.log('i18n initialized with language:', initialLanguage);
  } catch (error) {
    console.error('Error initializing i18n:', error);
    // Fallback initialization if AsyncStorage fails
    await i18n
      .use(initReactI18next)
      .init({
        resources,
        lng: 'en',
        fallbackLng: ['en'],
        
        interpolation: {
          escapeValue: false
        },
        
        react: {
          useSuspense: false
        }
      });
  }
};

// Initialize i18n
initializeI18n();

export default i18n; 