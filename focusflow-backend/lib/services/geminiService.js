// /lib/services/geminiService.js

const { GoogleGenerativeAI, SchemaType } = require('@google/generative-ai');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Áµ±‰∏ÄÊó•Ë™åÁÆ°ÁêÜ
const LogLevel = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  SILENT: 4
};

class SimpleLogger {
  constructor() {
    const envLevel = process.env.LOG_LEVEL || (process.env.NODE_ENV === 'production' ? 'ERROR' : 'DEBUG');
    this.currentLevel = this.parseLogLevel(envLevel);
  }

  parseLogLevel(level) {
    switch (level.toUpperCase()) {
      case 'DEBUG': return LogLevel.DEBUG;
      case 'INFO': return LogLevel.INFO;
      case 'WARN': case 'WARNING': return LogLevel.WARN;
      case 'ERROR': return LogLevel.ERROR;
      case 'SILENT': case 'NONE': return LogLevel.SILENT;
      default: return LogLevel.INFO;
    }
  }

  shouldLog(level) {
    return level >= this.currentLevel;
  }

  debug(message, data) {
    if (this.shouldLog(LogLevel.DEBUG)) {
      console.log(`[DEBUG] [GeminiService] ${message}`, data || '');
    }
  }

  info(message, data) {
    if (this.shouldLog(LogLevel.INFO)) {
      console.log(`[INFO] [GeminiService] ${message}`, data || '');
    }
  }

  warn(message, data) {
    if (this.shouldLog(LogLevel.WARN)) {
      console.warn(`[WARN] [GeminiService] ${message}`, data || '');
    }
  }

  error(message, error) {
    if (this.shouldLog(LogLevel.ERROR)) {
      console.error(`[ERROR] [GeminiService] ${message}`, error || '');
    }
  }
}

const logger = new SimpleLogger();

// üÜï ÂÆöÁæ©ÁµêÊßãÂåñËº∏Âá∫ÁöÑ Schema
const RESPONSE_SCHEMAS = {
  // ÂÄã‰∫∫ÂåñÂïèÈ°åÁîüÊàêÁöÑ Schema
  personalizationQuestions: {
    type: SchemaType.OBJECT,
    properties: {
      questions: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            question: { type: SchemaType.STRING },
            type: { 
              type: SchemaType.STRING,
              enum: ["text", "choice"]
            },
            options: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING },
              nullable: true
            },
            required: { type: SchemaType.BOOLEAN }
          },
          required: ["id", "question", "type", "required"]
        }
      }
    },
    required: ["questions"]
  },

  // Â≠ê‰ªªÂãôÁîüÊàêÁöÑ Schema
  subtasks: {
    type: SchemaType.OBJECT,
    properties: {
      subtasks: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            title: { type: SchemaType.STRING },
            text: { type: SchemaType.STRING },
            aiEstimatedDuration: { type: SchemaType.NUMBER },
            difficulty: { 
              type: SchemaType.STRING,
              enum: ["easy", "medium", "hard"]
            },
            order: { type: SchemaType.NUMBER },
            completed: { type: SchemaType.BOOLEAN },
            skills: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            recommendedResources: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            phase: { 
              type: SchemaType.STRING,
              enum: ["knowledge", "practice", "application", "reflection", "output", "review"]
            }
          },
          required: ["id", "title", "text", "aiEstimatedDuration", "difficulty", "order", "completed"]
        }
      }
    },
    required: ["subtasks"]
  },

  // Â≠∏ÁøíË®àÂäÉÁîüÊàêÁöÑ Schema
  learningPlan: {
    type: SchemaType.OBJECT,
    properties: {
      achievableGoal: { type: SchemaType.STRING },
      recommendedTools: {
        type: SchemaType.ARRAY,
        items: { type: SchemaType.STRING }
      },
      checkpoints: {
        type: SchemaType.ARRAY,
        items: { type: SchemaType.STRING }
      },
      estimatedTimeToCompletion: { type: SchemaType.NUMBER },
      subtasks: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            title: { type: SchemaType.STRING },
            text: { type: SchemaType.STRING },
            aiEstimatedDuration: { type: SchemaType.NUMBER },
            difficulty: { 
              type: SchemaType.STRING,
              enum: ["easy", "medium", "hard"]
            },
            order: { type: SchemaType.NUMBER },
            completed: { type: SchemaType.BOOLEAN },
            skills: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            recommendedResources: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            phase: { 
              type: SchemaType.STRING,
              enum: ["knowledge", "practice", "application", "reflection", "output", "review"]
            }
          },
          required: ["id", "title", "text", "aiEstimatedDuration", "difficulty", "order", "completed"]
        }
      }
    },
    required: ["achievableGoal", "recommendedTools", "checkpoints", "estimatedTimeToCompletion"]
  },

  // Áµ±‰∏ÄÂ≠∏ÁøíË®àÂäÉÁöÑ Schema
  unifiedLearningPlan: {
    type: SchemaType.OBJECT,
    properties: {
      personalizationQuestions: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            question: { type: SchemaType.STRING },
            type: { 
              type: SchemaType.STRING,
              enum: ["text", "choice"]
            },
            options: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING },
              nullable: true
            },
            required: { type: SchemaType.BOOLEAN }
          },
          required: ["id", "question", "type", "required"]
        }
      },
      learningPlan: {
        type: SchemaType.OBJECT,
        properties: {
          achievableGoal: { type: SchemaType.STRING },
          recommendedTools: {
            type: SchemaType.ARRAY,
            items: { type: SchemaType.STRING }
          },
          checkpoints: {
            type: SchemaType.ARRAY,
            items: { type: SchemaType.STRING }
          },
          estimatedTimeToCompletion: { type: SchemaType.NUMBER }
        },
        required: ["achievableGoal", "recommendedTools", "checkpoints", "estimatedTimeToCompletion"]
      },
      subtasks: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            title: { type: SchemaType.STRING },
            text: { type: SchemaType.STRING },
            aiEstimatedDuration: { type: SchemaType.NUMBER },
            difficulty: { 
              type: SchemaType.STRING,
              enum: ["easy", "medium", "hard"]
            },
            order: { type: SchemaType.NUMBER },
            completed: { type: SchemaType.BOOLEAN },
            skills: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            recommendedResources: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            phase: { 
              type: SchemaType.STRING,
              enum: ["knowledge", "practice", "application", "reflection", "output", "review"]
            }
          },
          required: ["id", "title", "text", "aiEstimatedDuration", "difficulty", "order", "completed"]
        }
      }
    },
    required: ["personalizationQuestions", "learningPlan", "subtasks"]
  },

  // üÜï Â¢ûÂº∑ÁâàÂ≠∏ÁøíË®àÂäÉÁöÑ Schema - ÂåÖÂê´‰æùË≥¥Èóú‰øÇÂíåÊôÇÈñìÁ¥ÑÊùü
  enhancedLearningPlan: {
    type: SchemaType.OBJECT,
    properties: {
      personalizationQuestions: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            question: { type: SchemaType.STRING },
            type: { 
              type: SchemaType.STRING,
              enum: ["text", "choice"]
            },
            options: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING },
              nullable: true
            },
            required: { type: SchemaType.BOOLEAN }
          },
          required: ["id", "question", "type", "required"]
        }
      },
      learningPlan: {
        type: SchemaType.OBJECT,
        properties: {
          achievableGoal: { type: SchemaType.STRING },
          recommendedTools: {
            type: SchemaType.ARRAY,
            items: { type: SchemaType.STRING }
          },
          checkpoints: {
            type: SchemaType.ARRAY,
            items: { type: SchemaType.STRING }
          },
          estimatedTimeToCompletion: { type: SchemaType.NUMBER }
        },
        required: ["achievableGoal", "recommendedTools", "checkpoints", "estimatedTimeToCompletion"]
      },
      subtasks: {
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            id: { type: SchemaType.STRING },
            title: { type: SchemaType.STRING },
            text: { type: SchemaType.STRING },
            aiEstimatedDuration: { type: SchemaType.NUMBER },
            difficulty: { 
              type: SchemaType.STRING,
              enum: ["easy", "medium", "hard"]
            },
            order: { type: SchemaType.NUMBER },
            completed: { type: SchemaType.BOOLEAN },
            skills: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            recommendedResources: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING }
            },
            phase: { 
              type: SchemaType.STRING,
              enum: ["knowledge", "practice", "application", "reflection", "output", "review"]
            },
            dependencies: {
              type: SchemaType.ARRAY,
              items: { type: SchemaType.STRING },
              nullable: true
            }
          },
          required: ["id", "title", "text", "aiEstimatedDuration", "difficulty", "order", "completed"]
        }
      }
    },
    required: ["personalizationQuestions", "learningPlan", "subtasks"]
  },

  // üÜï Êñ∞Â¢ûÁîüÁî¢ÂäõÂª∫Ë≠∞ schema
  productivityTips: {
    type: SchemaType.OBJECT,
    properties: {
      tips: {
        type: SchemaType.ARRAY,
        items: { type: SchemaType.STRING }
      }
    },
    required: ["tips"]
  },

  // üÜï Êñ∞Â¢ûÂ≠∏ÁøíÂïèÈ°å schema
  learningQuestions: {
    type: SchemaType.OBJECT,
    properties: {
      questions: {
        type: SchemaType.ARRAY,
        items: { type: SchemaType.STRING }
      }
    },
    required: ["questions"]
  },

  // üÜï Êñ∞Â¢ûËº∏ÂÖ•ÂìÅË≥™Ë©ï‰º∞ schema
  inputQuality: {
    type: SchemaType.OBJECT,
    properties: {
      isSufficient: { type: SchemaType.BOOLEAN },
      reasons: {
        type: SchemaType.ARRAY,
        items: { type: SchemaType.STRING }
      }
    },
    required: ["isSufficient", "reasons"]
  }
};

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.defaultModel = process.env.DEFAULT_MODEL || 'gemini-2.5-flash';
    this.defaultMaxTokens = parseInt(process.env.GEMINI_MAX_TOKENS || process.env.DEFAULT_MAX_TOKENS) || 6000;
    this.defaultTemperature = parseFloat(process.env.DEFAULT_TEMPERATURE) || 0.1;
    this.requestTimeout = parseInt(process.env.REQUEST_TIMEOUT) || 30000;
    
    if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here') {
      logger.warn('GEMINI_API_KEY not properly configured in .env file');
      this.genAI = null;
    } else {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
      logger.info('Gemini API key configured');
    }
  }

  /**
   * Call Gemini API with structured output using responseSchema
   * @param {string} systemPrompt - System instructions for the AI
   * @param {string} userContent - User input content
   * @param {Object} options - Additional options including schema
   * @returns {Promise<Object>} - Parsed AI response object
   */
  async callGeminiStructured(systemPrompt, userContent, options = {}) {
    const startTime = Date.now();
    const maxRetries = options.maxRetries || 1; // üîß ÈÄ≤‰∏ÄÊ≠•Ê∏õÂ∞ëÈáçË©¶Ê¨°Êï∏ÔºåÂä†Âø´ËôïÁêÜÈÄüÂ∫¶
    let lastError = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        if (!this.genAI) {
          throw new Error('Gemini API not configured. Please check your GEMINI_API_KEY environment variable.');
        }

        const model = this.genAI.getGenerativeModel({ 
          model: options.model || this.defaultModel 
        });

        // üÜï ÂèñÂæóÊåáÂÆöÁöÑ schema
        const schemaType = options.schemaType || 'subtasks';
        const responseSchema = RESPONSE_SCHEMAS[schemaType];
        
        if (!responseSchema) {
          throw new Error(`Unknown schema type: ${schemaType}`);
        }

        logger.info(`[Attempt ${attempt}/${maxRetries}] Calling Gemini with structured output (${schemaType})`);
        logger.debug(`Model: ${options.model || this.defaultModel}`);

        // üîß Á∞°ÂåñÔºö‰ΩøÁî®Á©©ÂÆöÁöÑÈÖçÁΩÆÔºå‰∏çÂÅöË§áÈõúÁöÑÈÅ©ÊáâÊÄßË™øÊï¥
        const requestConfig = {
          contents: [
            {
              role: 'user',
              parts: [{ text: `${systemPrompt}\n\nUser Request: ${userContent}` }]
            }
          ],
          generationConfig: {
            responseMimeType: "application/json",
            responseSchema: responseSchema,
            maxOutputTokens: this.defaultMaxTokens,
            temperature: 0.1, // ‰øùÊåÅ‰ΩéÊ∫´Â∫¶Á¢∫‰øùÁ©©ÂÆöÊÄß
            topP: 0.8,
          }
        };

        const result = await model.generateContent(requestConfig);
        
        logger.debug(`Request took: ${Date.now() - startTime}ms`);

        // üîß Á∞°ÂåñÔºöÁõ¥Êé•Ëß£Êûê JSONÔºåÂè™ÂÅöÂü∫Êú¨ÈåØË™§ËôïÁêÜ
        const responseText = result.response.text();
        
        logger.debug(`Response length: ${responseText.length} characters`);
        
        // ÊîπÂñÑÁöÑ JSON Ëß£ÊûêÔºåËôïÁêÜÊà™Êñ∑ÂïèÈ°å
        let parsedResponse;
        try {
          // Ê™¢Êü•ÂõûÊáâÊòØÂê¶Ë¢´Êà™Êñ∑
          if (responseText.length < 50) {
            throw new Error(`Response too short: ${responseText.length} characters`);
          }
          
          // Ê™¢Êü•ÊòØÂê¶‰ª• JSON ÁµêÂ∞æ
          const trimmedResponse = responseText.trim();
          if (!trimmedResponse.endsWith('}') && !trimmedResponse.endsWith(']')) {
            logger.warn(`‚ö†Ô∏è Response may be truncated, length: ${responseText.length}`);
            logger.debug(`Response end: ...${responseText.slice(-100)}`);
          }
          
          parsedResponse = JSON.parse(responseText);
        } catch (parseError) {
          logger.warn(`‚ö†Ô∏è JSON parsing failed: ${parseError.message}`);
          logger.debug(`Response length: ${responseText.length}`);
          logger.debug(`Response preview: ${responseText.substring(0, 200)}...`);
          
          if (attempt < maxRetries) {
            lastError = parseError;
            continue; // ÈáçË©¶
          } else {
            throw new Error(`JSON parsing failed after ${maxRetries} attempts: ${parseError.message}`);
          }
        }
        
        // Âü∫Êú¨È©óË≠âÔºöÁ¢∫‰øùÊúâÂøÖË¶ÅÁöÑÂ≠óÊÆµ
        if (schemaType === 'subtasks' && (!parsedResponse.subtasks || !Array.isArray(parsedResponse.subtasks))) {
          if (attempt < maxRetries) {
            lastError = new Error('Invalid subtasks format');
            continue;
          } else {
            throw new Error('Response missing required subtasks array');
          }
        }
        
        logger.info(`‚úÖ Structured output validated successfully (${schemaType})`);
        return parsedResponse;

      } catch (error) {
        logger.error(`‚ùå [Attempt ${attempt}/${maxRetries}] Structured output failed:`, error.message);
        lastError = error;
        
        if (attempt < maxRetries) {
          const delay = 500; // Ê∏õÂ∞ëÂª∂ÈÅ≤ÊôÇÈñìÂæû 1000ms Âà∞ 500ms
          logger.info(`‚è≥ Waiting ${delay}ms before retry...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }

    // Â¶ÇÊûúÊâÄÊúâÈáçË©¶ÈÉΩÂ§±Êïó‰∫Ü
    throw lastError || new Error('All structured output attempts failed');
  }

  // üîß ÁßªÈô§‰∫ÜË§áÈõúÁöÑÈÅ©ÊáâÊÄßÈÖçÁΩÆÂíåÊèêÁ§∫Â¢ûÂº∑ÂáΩÊï∏

  // üîß ÁßªÈô§‰∫ÜË§áÈõúÁöÑÊà™Êñ∑Ê™¢Ê∏¨„ÄÅJSON‰øÆÂæ©ÂíåÂÅ•Â∫∑Ê™¢Êü•ÂáΩÊï∏

  /**
   * È©óË≠âÁµêÊßãÂåñÈüøÊáâÊòØÂê¶Á¨¶Âêà schema Ë¶ÅÊ±Ç
   * @param {Object} response - AI ÈüøÊáâÂ∞çË±°
   * @param {string} schemaType - Schema È°ûÂûã
   * @returns {Object} - È©óË≠âÁµêÊûú
   */
  validateStructuredResponse(response, schemaType) {
    const errors = [];

    if (schemaType === 'subtasks') {
      // È©óË≠âÂ≠ê‰ªªÂãô schema
      if (!response.subtasks || !Array.isArray(response.subtasks)) {
        errors.push('Missing or invalid subtasks array');
        return { isValid: false, errors };
      }

      response.subtasks.forEach((subtask, index) => {
        const requiredFields = ['id', 'title', 'text', 'aiEstimatedDuration', 'difficulty', 'order', 'completed'];
        const missingFields = requiredFields.filter(field => {
          if (field === 'completed') return typeof subtask[field] !== 'boolean';
          if (field === 'aiEstimatedDuration' || field === 'order') return typeof subtask[field] !== 'number';
          return !subtask[field];
        });

        if (missingFields.length > 0) {
          errors.push(`Subtask ${index + 1}: missing fields [${missingFields.join(', ')}]`);
        }

        // È©óË≠âÊûöËàâÂÄº
        if (subtask.difficulty && !['easy', 'medium', 'hard'].includes(subtask.difficulty)) {
          errors.push(`Subtask ${index + 1}: invalid difficulty "${subtask.difficulty}"`);
        }
        if (subtask.phase && !['knowledge', 'practice', 'application', 'reflection', 'output', 'review'].includes(subtask.phase)) {
          errors.push(`Subtask ${index + 1}: invalid phase "${subtask.phase}"`);
        }
      });
    } else if (schemaType === 'unifiedLearningPlan') {
      // È©óË≠âÁµ±‰∏ÄÂ≠∏ÁøíË®àÂäÉ schema
      if (!response.personalizationQuestions || !Array.isArray(response.personalizationQuestions)) {
        errors.push('Missing personalizationQuestions array');
      }
      if (!response.learningPlan || typeof response.learningPlan !== 'object') {
        errors.push('Missing learningPlan object');
      }
      if (!response.subtasks || !Array.isArray(response.subtasks)) {
        errors.push('Missing subtasks array');
      }

      // È©óË≠âÂ≠ê‰ªªÂãô
      if (response.subtasks) {
        response.subtasks.forEach((subtask, index) => {
          const requiredFields = ['id', 'title', 'text', 'aiEstimatedDuration', 'difficulty', 'order', 'completed'];
          const missingFields = requiredFields.filter(field => {
            if (field === 'completed') return typeof subtask[field] !== 'boolean';
            if (field === 'aiEstimatedDuration' || field === 'order') return typeof subtask[field] !== 'number';
            return !subtask[field];
          });

          if (missingFields.length > 0) {
            errors.push(`Subtask ${index + 1}: missing fields [${missingFields.join(', ')}]`);
          }
        });
      }
    } else if (schemaType === 'productivityTips') {
      // üÜï È©óË≠âÁîüÁî¢ÂäõÂª∫Ë≠∞ schema
      if (!response.tips || !Array.isArray(response.tips)) {
        errors.push('Missing or invalid tips array');
        return { isValid: false, errors };
      }

      if (response.tips.length === 0) {
        errors.push('Tips array is empty');
      }

      response.tips.forEach((tip, index) => {
        if (typeof tip !== 'string' || tip.trim().length === 0) {
          errors.push(`Tip ${index + 1}: must be a non-empty string`);
        }
      });
    } else if (schemaType === 'learningQuestions') {
      // üÜï È©óË≠âÂ≠∏ÁøíÂïèÈ°å schema
      if (!response.questions || !Array.isArray(response.questions)) {
        errors.push('Missing or invalid questions array');
        return { isValid: false, errors };
      }

      if (response.questions.length === 0) {
        errors.push('Questions array is empty');
      }

      response.questions.forEach((question, index) => {
        if (typeof question !== 'string' || question.trim().length === 0) {
          errors.push(`Question ${index + 1}: must be a non-empty string`);
        }
      });
    } else if (schemaType === 'inputQuality') {
      // üÜï È©óË≠âËº∏ÂÖ•ÂìÅË≥™Ë©ï‰º∞ schema
      if (typeof response.isSufficient !== 'boolean') {
        errors.push('Missing or invalid isSufficient boolean');
      }

      if (response.reasons && !Array.isArray(response.reasons)) {
        errors.push('Invalid reasons array');
      }

      if (response.reasons) {
        response.reasons.forEach((reason, index) => {
          if (typeof reason !== 'string' || reason.trim().length === 0) {
            errors.push(`Reason ${index + 1}: must be a non-empty string`);
          }
        });
      }
    } else if (schemaType === 'personalizationQuestions') {
      // üÜï È©óË≠âÂÄã‰∫∫ÂåñÂïèÈ°å schema (‰πãÂâçÁº∫Â∞ë)
      if (!response.questions || !Array.isArray(response.questions)) {
        errors.push('Missing or invalid questions array');
        return { isValid: false, errors };
      }

      response.questions.forEach((question, index) => {
        const requiredFields = ['id', 'question', 'type', 'required'];
        const missingFields = requiredFields.filter(field => {
          if (field === 'required') return typeof question[field] !== 'boolean';
          return !question[field];
        });

        if (missingFields.length > 0) {
          errors.push(`Question ${index + 1}: missing fields [${missingFields.join(', ')}]`);
        }

        // È©óË≠âÂïèÈ°åÈ°ûÂûã
        if (question.type && !['text', 'choice', 'scale'].includes(question.type)) {
          errors.push(`Question ${index + 1}: invalid type "${question.type}"`);
        }

        // Â¶ÇÊûúÊòØÈÅ∏ÊìáÈ°åÔºåÊ™¢Êü•ÊòØÂê¶ÊúâÈÅ∏È†Ö
        if (question.type === 'choice' && (!question.options || !Array.isArray(question.options) || question.options.length === 0)) {
          errors.push(`Question ${index + 1}: choice type requires non-empty options array`);
        }
      });
    } else if (schemaType === 'learningPlan') {
      // üÜï È©óË≠âÂ≠∏ÁøíË®àÂäÉ schema (‰πãÂâçÁº∫Â∞ë)
      if (!response.achievableGoal || typeof response.achievableGoal !== 'string') {
        errors.push('Missing or invalid achievableGoal string');
      }

      if (!response.recommendedTools || !Array.isArray(response.recommendedTools)) {
        errors.push('Missing or invalid recommendedTools array');
      }

      if (!response.checkpoints || !Array.isArray(response.checkpoints)) {
        errors.push('Missing or invalid checkpoints array');
      }

      if (typeof response.estimatedTimeToCompletion !== 'number') {
        errors.push('Missing or invalid estimatedTimeToCompletion number');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * ÂòóË©¶‰øÆÂæ©Â∏∏Ë¶ãÁöÑÁµêÊßãÂåñÈüøÊáâÂïèÈ°å
   * @param {Object} response - ÂéüÂßãÈüøÊáâ
   * @param {string} schemaType - Schema È°ûÂûã
   * @returns {Object|null} - ‰øÆÂæ©ÂæåÁöÑÈüøÊáâÔºåÂ¶ÇÊûúÁÑ°Ê≥ï‰øÆÂæ©ÂâáËøîÂõû null
   */
  repairStructuredResponse(response, schemaType) {
    try {
      const repairedResponse = JSON.parse(JSON.stringify(response)); // Ê∑±Êã∑Ë≤ù

      if (schemaType === 'subtasks' || schemaType === 'unifiedLearningPlan') {
        const subtasks = schemaType === 'subtasks' ? repairedResponse.subtasks : repairedResponse.subtasks;
        
        if (subtasks && Array.isArray(subtasks)) {
          subtasks.forEach((subtask, index) => {
            // ‰øÆÂæ©Áº∫Â§±ÁöÑÂøÖÈúÄÊ¨Ñ‰Ωç
            if (!subtask.id) {
              subtask.id = `repaired_subtask_${index + 1}_${Date.now()}`;
            }
            if (!subtask.title) {
              subtask.title = `Task ${index + 1}`;
            }
            if (!subtask.text) {
              subtask.text = subtask.description || subtask.title || `Task ${index + 1} description`;
            }
            if (typeof subtask.aiEstimatedDuration !== 'number') {
              subtask.aiEstimatedDuration = subtask.duration || 60;
            }
            if (!subtask.difficulty) {
              subtask.difficulty = 'medium';
            }
            if (typeof subtask.order !== 'number') {
              subtask.order = index + 1;
            }
            if (typeof subtask.completed !== 'boolean') {
              subtask.completed = false;
            }
            if (!Array.isArray(subtask.skills)) {
              subtask.skills = subtask.tags || [];
            }
            if (!Array.isArray(subtask.recommendedResources)) {
              subtask.recommendedResources = [];
            }
            if (!subtask.phase) {
              // Ê†πÊìöÈ†ÜÂ∫èÂàÜÈÖçÈöéÊÆµ
              const phases = ['knowledge', 'practice', 'application', 'reflection', 'output', 'review'];
              subtask.phase = phases[index % phases.length];
            }

            // ‰øÆÂæ©ÁÑ°ÊïàÁöÑÊûöËàâÂÄº
            if (!['easy', 'medium', 'hard'].includes(subtask.difficulty)) {
              subtask.difficulty = 'medium';
            }
            if (subtask.phase && !['knowledge', 'practice', 'application', 'reflection', 'output', 'review'].includes(subtask.phase)) {
              subtask.phase = 'practice';
            }
          });
        }
      }

      return repairedResponse;
    } catch (error) {
      console.error('Failed to repair response:', error);
      return null;
    }
  }

  /**
   * Legacy callGemini method for backward compatibility
   * @deprecated Use callGeminiStructured for better reliability
   */
  async callGemini(systemPrompt, userContent, options = {}) {
    console.warn('‚ö†Ô∏è DEPRECATED: callGemini() is deprecated. Use callGeminiStructured() for better reliability.');
    
    // For backward compatibility, try to provide a simple schema if none provided
    if (!options.schema && !options.schemaType) {
      // Try to guess the schema type based on content
      if (systemPrompt.includes('questions') || userContent.includes('questions')) {
        options.schemaType = 'personalizationQuestions';
      } else if (systemPrompt.includes('subtasks') || userContent.includes('subtasks')) {
        options.schemaType = 'subtasks';
      } else if (systemPrompt.includes('learning plan') || userContent.includes('learning plan')) {
        options.schemaType = 'learningPlan';
      } else {
        options.schemaType = 'subtasks'; // Default fallback
      }
    }
    
    try {
      const result = await this.callGeminiStructured(systemPrompt, userContent, options);
      // Return as JSON string for backward compatibility
      return JSON.stringify(result);
    } catch (error) {
      console.error('‚ùå Structured call failed in legacy mode:', error);
      throw error;
    }
  }

  /**
   * Parse AI response with enhanced error handling and auto-repair for truncated responses
   * @param {string} response - Raw AI response
   * @returns {Object} - Parsed response object
   */
  parseAIResponse(response) {
    try {
      // Clean the response more carefully
      let cleanedResponse = response.trim();
      
      // Remove markdown code blocks
      cleanedResponse = cleanedResponse.replace(/^```(?:json|javascript|js)?\s*/gm, '');
      cleanedResponse = cleanedResponse.replace(/```\s*$/gm, '');
      cleanedResponse = cleanedResponse.replace(/^```/g, '');
      cleanedResponse = cleanedResponse.replace(/```$/g, '');
      
      // Remove any leading/trailing whitespace
      cleanedResponse = cleanedResponse.trim();
      
      // Find the first { and try to find the complete JSON
      const firstBrace = cleanedResponse.indexOf('{');
      if (firstBrace === -1) {
        throw new Error('No JSON object found in response');
      }
      
      // Extract everything from the first brace
      let jsonCandidate = cleanedResponse.substring(firstBrace);
      
      // Try to find the balanced JSON by counting braces
      let braceCount = 0;
      let jsonEnd = -1;
      
      for (let i = 0; i < jsonCandidate.length; i++) {
        const char = jsonCandidate[i];
        if (char === '{') {
          braceCount++;
        } else if (char === '}') {
          braceCount--;
          if (braceCount === 0) {
            jsonEnd = i;
            break;
          }
        }
      }
      
      if (jsonEnd !== -1) {
        // We found a complete JSON object
        const completeJson = jsonCandidate.substring(0, jsonEnd + 1);
        return JSON.parse(completeJson);
      } else {
        // JSON is incomplete, but let's try to parse what we have
        // This might fail, but we'll catch it below
        return JSON.parse(jsonCandidate);
      }
      
    } catch (error) {
      console.error('Failed to parse Gemini response:', error);
      console.error('Raw response length:', response.length);
      console.error('Raw response preview (first 500 chars):', response.substring(0, 500));
      console.error('Raw response preview (last 500 chars):', response.substring(Math.max(0, response.length - 500)));
      
      // üÜï Enhanced auto-repair system for truncated JSON responses
      try {
        // Try to extract and repair the JSON
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          let extractedJson = jsonMatch[0];
          
          // If the JSON appears incomplete, try to close it intelligently
          const openBraces = (extractedJson.match(/\{/g) || []).length;
          const closeBraces = (extractedJson.match(/\}/g) || []).length;
          
          if (openBraces > closeBraces) {
            console.log('üîß Attempting to repair truncated JSON...');
            
            // Handle incomplete string values
            if (extractedJson.match(/:\s*"[^"]*$/)) {
              // If it ends with an incomplete string value, close it
              extractedJson += '"';
            } else if (extractedJson.match(/,\s*"[^"]*$/)) {
              // If it ends with an incomplete property name, close it
              extractedJson += '": ""';
            } else if (extractedJson.match(/,\s*$/)) {
              // If it ends with a comma, remove the trailing comma
              extractedJson = extractedJson.replace(/,\s*$/, '');
            } else if (extractedJson.match(/:\s*\[.*[^}\]]\s*$/)) {
              // If it ends with an incomplete array, close the array
              extractedJson += ']';
            }
            
            // Add missing closing braces
            const missingBraces = openBraces - closeBraces;
            for (let i = 0; i < missingBraces; i++) {
              extractedJson += '}';
            }
            
            console.log('üîß Repaired JSON length:', extractedJson.length);
            const repairedResult = JSON.parse(extractedJson);
            console.log('‚úÖ Successfully repaired truncated JSON!');
            
            // Add a flag to indicate this was repaired
            repairedResult._repaired = true;
            repairedResult._originalLength = response.length;
            
            return repairedResult;
          }
        }
      } catch (repairError) {
        console.error('‚ùå JSON repair attempt failed:', repairError);
      }
      
      // üÜï Try partial extraction for specific patterns
      try {
        console.log('üîß Attempting partial extraction...');
        
        // Look for questions array specifically
        const questionsMatch = response.match(/"questions"\s*:\s*\[([\s\S]*?)\]/);
        if (questionsMatch) {
          const questionsContent = questionsMatch[1];
          
          // Try to parse individual questions
          const questions = [];
          const questionMatches = questionsContent.match(/\{[^}]*\}/g) || [];
          
          questionMatches.forEach(qMatch => {
            try {
              const question = JSON.parse(qMatch);
              questions.push(question);
            } catch (qError) {
              // Skip malformed individual questions
            }
          });
          
          if (questions.length > 0) {
            console.log(`‚úÖ Extracted ${questions.length} questions via partial parsing`);
            return { questions, _extracted: true };
          }
        }
        
        // Look for subtasks array specifically
        const subtasksMatch = response.match(/"subtasks"\s*:\s*\[([\s\S]*?)\]/);
        if (subtasksMatch) {
          const subtasksContent = subtasksMatch[1];
          
          // Try to parse individual subtasks
          const subtasks = [];
          const subtaskMatches = subtasksContent.match(/\{[^}]*\}/g) || [];
          
          subtaskMatches.forEach(sMatch => {
            try {
              const subtask = JSON.parse(sMatch);
              subtasks.push(subtask);
            } catch (sError) {
              // Skip malformed individual subtasks
            }
          });
          
          if (subtasks.length > 0) {
            console.log(`‚úÖ Extracted ${subtasks.length} subtasks via partial parsing`);
            return { subtasks, _extracted: true };
          }
        }
        
      } catch (extractError) {
        console.error('‚ùå Partial extraction failed:', extractError);
      }
      
      // Final fallback: return a structured error response with debugging info
      console.warn('‚ö†Ô∏è Returning fallback response due to parsing failure');
      return {
        error: 'Failed to parse AI response',
        errorType: 'JSON_PARSE_ERROR',
        originalError: error.message,
        rawResponsePreview: response.substring(0, 200),
        rawResponseLength: response.length,
        success: false,
        troubleshooting: {
          suggestion: 'The AI response may be truncated or malformed. Try regenerating.',
          possibleCauses: [
            'Response was cut off due to token limits',
            'Network interruption during response',
            'Malformed JSON from AI model',
            'Special characters causing encoding issues'
          ]
        }
      };
    }
  }

  /**
   * Health check for Gemini service
   * @returns {Promise<Object>} - Health status
   */
  async checkHealth() {
    try {
      if (!this.genAI) {
        return {
          status: 'error',
          geminiService: 'misconfigured',
          error: 'Gemini API key not configured or invalid',
          timestamp: new Date().toISOString(),
          note: 'Please check your GEMINI_API_KEY environment variable'
        };
      }

      // üÜï ‰ΩøÁî®Á∞°ÂñÆÁöÑÁµêÊßãÂåñÊ∏¨Ë©¶
      const testSystemPrompt = 'You are a helpful assistant providing health status information.';
      const testUserPrompt = 'Generate a simple health check response with questions array containing one question about system status.';
      
      const testResponse = await this.callGeminiStructured(
        testSystemPrompt,
        testUserPrompt,
        { schemaType: 'personalizationQuestions', timeout: 10000 }
      );

      // Ê™¢Êü•ÁµêÊßãÂåñÈüøÊáâ
      if (testResponse && testResponse.questions && Array.isArray(testResponse.questions)) {
        return {
          status: 'healthy',
          geminiService: 'operational',
          model: this.defaultModel,
          timestamp: new Date().toISOString(),
          apiKeyConfigured: true,
          testResponse: `Generated ${testResponse.questions.length} questions successfully`,
          features: {
            structuredOutput: 'enabled',
            schemaValidation: 'working'
          }
        };
      } else {
        return {
          status: 'warning',
          geminiService: 'responding_unexpectedly',
          error: 'Gemini is responding but not in expected structured format',
          timestamp: new Date().toISOString(),
          testResponse: JSON.stringify(testResponse).substring(0, 200) + '...'
        };
      }

    } catch (error) {
      console.error('Gemini health check failed:', error);
      
      // Analyze the error for better reporting
      let errorStatus = 'error';
      let errorType = 'unknown';
      
      if (error.message?.includes('API_KEY_INVALID') || error.message?.includes('Invalid Gemini API key')) {
        errorStatus = 'misconfigured';
        errorType = 'invalid_api_key';
      } else if (error.message?.includes('QUOTA_EXCEEDED')) {
        errorStatus = 'quota_exceeded';
        errorType = 'usage_limit_reached';
      } else if (error.message?.includes('timeout')) {
        errorStatus = 'timeout';
        errorType = 'service_slow';
      } else if (error.message?.includes('PERMISSION_DENIED')) {
        errorStatus = 'permission_denied';
        errorType = 'insufficient_permissions';
      }

      return {
        status: errorStatus,
        geminiService: errorType,
        error: error.message || 'Unknown error occurred',
        timestamp: new Date().toISOString(),
        note: 'Please check your Gemini API configuration and account status'
      };
    }
  }

  /**
   * Get available models (for compatibility)
   * @returns {Array} - List of available models
   */
  getAvailableModels() {
    return [
      {
        id: 'gemini-2.5-flash',
        name: 'Gemini 2.5 Flash',
        description: 'Latest ultra-fast Gemini Flash model with advanced capabilities',
        maxTokens: 8192,
        recommended: true
      },
      {
        id: 'gemini-2.0-flash',
        name: 'Gemini 2.0 Flash',
        description: 'High-performance Gemini 2.0 Flash model for production use',
        maxTokens: 8192,
        recommended: false
      },
      {
        id: 'gemini-1.5-pro',
        name: 'Gemini 1.5 Pro',
        description: 'Previous generation Gemini Pro model with enhanced capabilities',
        maxTokens: 8192,
        recommended: false
      },
      {
        id: 'gemini-1.5-flash',
        name: 'Gemini 1.5 Flash',
        description: 'Previous generation Gemini Flash model',
        maxTokens: 8192,
        recommended: false
      }
    ];
  }

  /**
   * Get current configuration
   * @returns {Object} - Current service configuration
   */
  getConfiguration() {
    return {
      model: this.defaultModel,
      maxTokens: this.defaultMaxTokens,
      temperature: this.defaultTemperature,
      timeout: this.requestTimeout,
      apiKeyConfigured: Boolean(this.apiKey && this.apiKey !== 'your_gemini_api_key_here'),
      availableModels: this.getAvailableModels()
    };
  }

  /**
   * ‰º∞ÁÆóÊñáÊú¨ÁöÑ token Êï∏Èáè
   * ÈÄôÊòØ‰∏ÄÂÄãÁ∞°ÂåñÁöÑ‰º∞ÁÆóÊñπÊ≥ïÔºåÂØ¶Èöõ token Êï∏ÈáèÂèØËÉΩÊúâÊâÄ‰∏çÂêå
   * @param {string} text - Ë¶Å‰º∞ÁÆóÁöÑÊñáÊú¨
   * @returns {number} - ‰º∞ÁÆóÁöÑ token Êï∏Èáè
   */
  estimateTokens(text) {
    if (!text || typeof text !== 'string') {
      return 0;
    }

    // Âü∫Êú¨ÁöÑ token ‰º∞ÁÆóÈÇèËºØ
    // Â∞çÊñº‰∏≠ÊñáÔºöÂ§ßÁ¥Ñ 1.5-2 ÂÄãÂ≠óÁ¨¶ = 1 token
    // Â∞çÊñºËã±ÊñáÔºöÂ§ßÁ¥Ñ 4 ÂÄãÂ≠óÁ¨¶ = 1 token
    
    const chineseCharRegex = /[\u4e00-\u9fff]/g;
    const chineseChars = (text.match(chineseCharRegex) || []).length;
    const otherChars = text.length - chineseChars;
    
    // ‰∏≠ÊñáÂ≠óÁ¨¶Êåâ 1.5 Â≠óÁ¨¶/token Ë®àÁÆóÔºåÂÖ∂‰ªñÂ≠óÁ¨¶Êåâ 4 Â≠óÁ¨¶/token Ë®àÁÆó
    const estimatedTokens = Math.ceil(chineseChars / 1.5) + Math.ceil(otherChars / 4);
    
    return Math.max(1, estimatedTokens); // Ëá≥Â∞ë 1 ÂÄã token
  }
}

/**
 * üÜï Â¢ûÂº∑ÁöÑÊú¨Âú∞ÂæåÂÇôÁ≥ªÁµ±
 * Áï∂ API ‰∏çÂèØÁî®ÊôÇÊèê‰æõÊõ¥Êô∫ËÉΩÁöÑÊú¨Âú∞ËôïÁêÜ
 */
class EnhancedFallbackService {
  constructor() {
    this.templates = this.initializeTemplates();
    this.knowledgeBase = this.initializeKnowledgeBase();
    this.stats = {
      fallbackUsage: 0,
      successRate: 0,
      templateMatches: 0,
      knowledgeBaseHits: 0
    };
  }

  /**
   * ÂàùÂßãÂåñÈüøÊáâÊ®°Êùø
   */
  initializeTemplates() {
    return {
      'learning-plan': {
        zh: {
          achievableGoal: "Âü∫ÊñºËº∏ÂÖ•ÂÖßÂÆπÂà∂ÂÆöÁöÑÂ≠∏ÁøíÁõÆÊ®ô",
          recommendedTools: ["Á∑ö‰∏äË™≤Á®ã", "ÂØ¶Ë∏êÁ∑¥Áøí", "Â∞àÊ•≠Êõ∏Á±ç", "Á§æÁæ§Ë®éË´ñ"],
          checkpoints: ["Âª∫Á´ãÂü∫Á§éÊ¶ÇÂøµ", "ÂØ¶Ë∏êÂü∫Êú¨ÊäÄËÉΩ", "ÈÄ≤ÈöéÊáâÁî®", "Â∞àÁ≤æÊéåÊè°"],
          estimatedTimeToCompletion: 180
        },
        en: {
          achievableGoal: "Learning goal based on input content",
          recommendedTools: ["Online courses", "Hands-on practice", "Professional books", "Community discussion"],
          checkpoints: ["Build foundation", "Practice basics", "Advanced application", "Master expertise"],
          estimatedTimeToCompletion: 180
        }
      },
      'subtasks-generation': {
        zh: {
          baseSubtasks: [
            { title: "Â≠∏ÁøíÂü∫Á§éÊ¶ÇÂøµ", difficulty: "easy", duration: 30 },
            { title: "ÁêÜËß£Ê†∏ÂøÉÂéüÁêÜ", difficulty: "medium", duration: 45 },
            { title: "ÂØ¶Ë∏êÂü∫Êú¨Êìç‰Ωú", difficulty: "medium", duration: 60 },
            { title: "Ê∑±ÂÖ•Â≠∏ÁøíÈÄ≤ÈöéÂÖßÂÆπ", difficulty: "hard", duration: 90 },
            { title: "ÂÆåÊàêÂØ¶ÈöõÈ†ÖÁõÆ", difficulty: "hard", duration: 120 }
          ]
        },
        en: {
          baseSubtasks: [
            { title: "Learn basic concepts", difficulty: "easy", duration: 30 },
            { title: "Understand core principles", difficulty: "medium", duration: 45 },
            { title: "Practice basic operations", difficulty: "medium", duration: 60 },
            { title: "Study advanced content", difficulty: "hard", duration: 90 },
            { title: "Complete practical project", difficulty: "hard", duration: 120 }
          ]
        }
      },
      'productivity-tips': {
        zh: [
          "Ë®≠ÂÆöÊòéÁ¢∫ÁöÑÂ≠∏ÁøíÁõÆÊ®ôÂíåÊôÇÈñìË°®",
          "‰ΩøÁî®Áï™ËåÑÂ∑•‰ΩúÊ≥ïÔºåÊØè25ÂàÜÈêòÂ∞àÊ≥®Â≠∏ÁøíÂæå‰ºëÊÅØ5ÂàÜÈêò",
          "ÂâµÂª∫ÁÑ°Âπ≤ÊìæÁöÑÂ≠∏ÁøíÁí∞Â¢É",
          "ÂÆöÊúüË§áÁøíÂ∑≤Â≠∏ÂÖßÂÆπÔºåÂä†Âº∑Ë®òÊÜ∂",
          "Ëàá‰ªñ‰∫∫ÂàÜ‰∫´Â≠∏ÁøíÂøÉÂæóÔºåÂä†Ê∑±ÁêÜËß£"
        ],
        en: [
          "Set clear learning goals and schedules",
          "Use Pomodoro Technique: 25 minutes focused learning + 5 minutes break",
          "Create a distraction-free learning environment",
          "Review learned content regularly to strengthen memory",
          "Share learning insights with others to deepen understanding"
        ]
      },
      'learning-questions': {
        zh: [
          "ÊÇ®Ë™çÁÇ∫ÈÄôÂÄãÂ≠∏ÁøíÂÖßÂÆπÁöÑÈóúÈçµË¶ÅÈªûÊòØ‰ªÄÈ∫ºÔºü",
          "Â¶Ç‰ΩïÂ∞áÊâÄÂ≠∏Áü•Ë≠òÊáâÁî®Âà∞ÂØ¶ÈöõÊÉÖÊ≥Å‰∏≠Ôºü",
          "Â≠∏ÁøíÈÅéÁ®ã‰∏≠ÈÅáÂà∞ÁöÑÊúÄÂ§ßÊåëÊà∞ÊòØ‰ªÄÈ∫ºÔºü",
          "ÊúâÂì™‰∫õÊñπÈù¢ÈúÄË¶ÅÈÄ≤‰∏ÄÊ≠•Âä†Âº∑Á∑¥ÁøíÔºü",
          "ÊÇ®Â∞çÈÄôÂÄã‰∏ªÈ°åÈÇÑÊúâ‰ªÄÈ∫ºÁñëÂïèÔºü"
        ],
        en: [
          "What do you think are the key points of this learning content?",
          "How can you apply the learned knowledge to real situations?",
          "What was the biggest challenge during the learning process?",
          "Which aspects need further practice and reinforcement?",
          "What other questions do you have about this topic?"
        ]
      },
      'personalization-questions': {
        zh: [
          { question: "ÊÇ®ÁõÆÂâçÁöÑÂ≠∏ÁøíÁ∂ìÈ©óÁ®ãÂ∫¶Â¶Ç‰ΩïÔºü", type: "choice", options: ["ÂàùÂ≠∏ËÄÖ", "ÊúâÂü∫Á§é", "‰∏≠Á≠âÊ∞¥Âπ≥", "ÈÄ≤Èöé"] },
          { question: "ÊÇ®Â∏åÊúõÈÅîÂà∞‰ªÄÈ∫ºÁ®ãÂ∫¶Ôºü", type: "choice", options: ["Âü∫Êú¨‰∫ÜËß£", "ÂØ¶ÈöõÊáâÁî®", "ÁÜüÁ∑¥ÊéåÊè°", "Â∞àÂÆ∂Ê∞¥Âπ≥"] },
          { question: "ÊÇ®ÊØèÂ§©ÂèØ‰ª•ÊäïÂÖ•Â§öÂ∞ëÊôÇÈñìÂ≠∏ÁøíÔºü", type: "choice", options: ["30ÂàÜÈêò‰ª•‰∏ã", "30-60ÂàÜÈêò", "1-2Â∞èÊôÇ", "2Â∞èÊôÇ‰ª•‰∏ä"] },
          { question: "ÊÇ®ÂÅèÂ•ΩÁöÑÂ≠∏ÁøíÊñπÂºèÊòØÔºü", type: "choice", options: ["ÁêÜË´ñÂ≠∏Áøí", "ÂØ¶Ë∏êÊìç‰Ωú", "È†ÖÁõÆÂ∞éÂêë", "Ê∑∑ÂêàÊñπÂºè"] }
        ],
        en: [
          { question: "What's your current experience level?", type: "choice", options: ["Beginner", "Basic knowledge", "Intermediate", "Advanced"] },
          { question: "What level do you want to achieve?", type: "choice", options: ["Basic understanding", "Practical application", "Proficient mastery", "Expert level"] },
          { question: "How much time can you dedicate daily?", type: "choice", options: ["Under 30 min", "30-60 min", "1-2 hours", "Over 2 hours"] },
          { question: "What's your preferred learning style?", type: "choice", options: ["Theoretical study", "Hands-on practice", "Project-based", "Mixed approach"] }
        ]
      }
    };
  }

  /**
   * ÂàùÂßãÂåñÁü•Ë≠òÂ∫´
   */
  initializeKnowledgeBase() {
    return {
      skillCategories: {
        'programming': {
          zh: ['Á®ãÂºèË®≠Ë®à', 'Á∑®Á®ã', 'ÈñãÁôº', 'ËªüÈ´î', 'Á®ãÂºè', 'coding'],
          en: ['programming', 'coding', 'development', 'software', 'computer']
        },
        'language': {
          zh: ['Ë™ûË®Ä', 'Ëã±Ë™û', '‰∏≠Êñá', 'Êó•Ë™û', 'Â§ñË™û', 'Âè£Ë™û'],
          en: ['language', 'english', 'chinese', 'japanese', 'speaking', 'grammar']
        },
        'business': {
          zh: ['ÂïÜÊ•≠', 'ÁÆ°ÁêÜ', 'Ë°åÈä∑', 'Ë≤°Âãô', '‰ºÅÊ•≠', 'ÂâµÊ•≠'],
          en: ['business', 'management', 'marketing', 'finance', 'entrepreneurship']
        },
        'design': {
          zh: ['Ë®≠Ë®à', 'ÁæéË°ì', 'Ë¶ñË¶∫', 'UI', 'UX', 'ÂâµÊÑè'],
          en: ['design', 'art', 'visual', 'ui', 'ux', 'creative', 'graphics']
        },
        'technology': {
          zh: ['ÁßëÊäÄ', 'ÊäÄË°ì', '‰∫∫Â∑•Êô∫ÊÖß', 'AI', 'Ê©üÂô®Â≠∏Áøí', 'Êï∏Êìö'],
          en: ['technology', 'ai', 'artificial intelligence', 'machine learning', 'data']
        }
      },
      difficultyKeywords: {
        easy: {
          zh: ['Âü∫Á§é', 'ÂÖ•ÈñÄ', 'Á∞°ÂñÆ', 'ÂàùÂ≠∏', 'Âü∫Êú¨'],
          en: ['basic', 'beginner', 'simple', 'introduction', 'fundamental']
        },
        medium: {
          zh: ['‰∏≠Á≠â', 'ÈÄ≤Èöé', 'Ê∑±ÂÖ•', 'ÊèêÂçá', 'ÊîπÈÄ≤'],
          en: ['intermediate', 'advanced', 'improve', 'enhance', 'develop']
        },
        hard: {
          zh: ['È´òÁ¥ö', 'Â∞àÊ•≠', 'Á≤æÈÄö', 'Â§ßÂ∏´', 'Â∞àÂÆ∂'],
          en: ['expert', 'professional', 'master', 'advanced', 'specialized']
        }
      }
    };
  }

  /**
   * Êô∫ËÉΩÂæåÂÇôÈüøÊáâÁîüÊàê
   */
  async generateFallbackResponse(requestType, content, options = {}) {
    this.stats.fallbackUsage++;
    
    try {
      const language = options.language || 'zh';
      let response;

      switch (requestType) {
        case 'learning-plan':
          response = this.generateLearningPlanFallback(content, language);
          break;
        case 'subtasks-generation':
          response = this.generateSubtasksFallback(content, language);
          break;
        case 'productivity-tips':
          response = this.generateProductivityTipsFallback(content, language);
          break;
        case 'learning-questions':
          response = this.generateLearningQuestionsFallback(content, language);
          break;
        case 'personalization-questions':
          response = this.generatePersonalizationFallback(content, language);
          break;
        default:
          response = this.generateGenericFallback(content, language);
      }

      // Ê∑ªÂä†ÂæåÂÇôÊ®ôË≠ò
      response._fallback = true;
      response._fallbackReason = 'API unavailable';
      response._confidence = this.calculateConfidence(content, requestType);
      
      this.stats.successRate = (this.stats.successRate * (this.stats.fallbackUsage - 1) + 1) / this.stats.fallbackUsage;
      
      return response;
    } catch (error) {
      console.error('Fallback generation failed:', error);
      return this.generateMinimalFallback(requestType, options.language || 'zh');
    }
  }

  /**
   * ÁîüÊàêÂ≠∏ÁøíË®àÂäÉÂæåÂÇôÈüøÊáâ
   */
  generateLearningPlanFallback(content, language) {
    const template = this.templates['learning-plan'][language];
    const category = this.detectSkillCategory(content, language);
    const difficulty = this.detectDifficulty(content, language);
    
    // Ê†πÊìöÈ°ûÂà•ÂíåÈõ£Â∫¶Ë™øÊï¥Ê®°Êùø
    const adjustedTemplate = this.adjustTemplateByCategory(template, category, difficulty, language);
    
    return {
      achievableGoal: this.generateContextualGoal(content, language),
      recommendedTools: adjustedTemplate.recommendedTools,
      checkpoints: adjustedTemplate.checkpoints,
      estimatedTimeToCompletion: this.estimateTimeByDifficulty(difficulty)
    };
  }

  /**
   * ÁîüÊàêÂ≠ê‰ªªÂãôÂæåÂÇôÈüøÊáâ
   */
  generateSubtasksFallback(content, language) {
    const template = this.templates['subtasks-generation'][language];
    const category = this.detectSkillCategory(content, language);
    const difficulty = this.detectDifficulty(content, language);
    
    const subtasks = template.baseSubtasks.map((subtask, index) => ({
      id: `fallback-${Date.now()}-${index}`,
      title: this.contextualizeSubtaskTitle(subtask.title, content, language),
      text: this.generateSubtaskDescription(subtask.title, content, language),
      aiEstimatedDuration: this.adjustDurationByDifficulty(subtask.duration, difficulty),
      difficulty: this.adjustSubtaskDifficulty(subtask.difficulty, difficulty),
      phase: this.getPhaseForIndex(index),
      tags: this.generateTagsForCategory(category, language)
    }));
    
    return subtasks;
  }

  /**
   * ÁîüÊàêÁîüÁî¢ÂäõÂª∫Ë≠∞ÂæåÂÇôÈüøÊáâ
   */
  generateProductivityTipsFallback(stats, language) {
    const baseTips = this.templates['productivity-tips'][language];
    
    // Ê†πÊìöÁµ±Ë®àÊï∏ÊìöÂÄãÊÄßÂåñÂª∫Ë≠∞
    const personalizedTips = baseTips.slice();
    
    if (stats.focusTime && stats.focusTime < 30) {
      const tip = language === 'zh' 
        ? "Âª∫Ë≠∞ÈÄêÊ≠•Âª∂Èï∑Â∞àÊ≥®ÊôÇÈñìÔºåÂæû15ÂàÜÈêòÈñãÂßãÊÖ¢ÊÖ¢Â¢ûÂä†"
        : "Gradually extend focus time, starting from 15 minutes and slowly increasing";
      personalizedTips.unshift(tip);
    }
    
    if (stats.distractions && stats.distractions > 5) {
      const tip = language === 'zh' 
        ? "ËÄÉÊÖÆÈóúÈñâÈÄöÁü•ÂíåÁ§æ‰∫§Â™íÈ´îÔºåÂâµÈÄ†Êõ¥Â∞àÊ≥®ÁöÑÁí∞Â¢É"
        : "Consider turning off notifications and social media for a more focused environment";
      personalizedTips.push(tip);
    }
    
    return personalizedTips.slice(0, 5); // ËøîÂõûÊúÄÂ§ö5ÂÄãÂª∫Ë≠∞
  }

  /**
   * ÁîüÊàêÂ≠∏ÁøíÂïèÈ°åÂæåÂÇôÈüøÊáâ
   */
  generateLearningQuestionsFallback(content, language) {
    const baseQuestions = this.templates['learning-questions'][language];
    const category = this.detectSkillCategory(content, language);
    
    // Ê†πÊìöÈ°ûÂà•Ë™øÊï¥ÂïèÈ°å
    const contextualQuestions = baseQuestions.map(question => 
      this.contextualizeQuestion(question, content, category, language)
    );
    
    return contextualQuestions;
  }

  /**
   * ÁîüÊàêÂÄã‰∫∫ÂåñÂïèÈ°åÂæåÂÇôÈüøÊáâ
   */
  generatePersonalizationFallback(content, language) {
    const baseQuestions = this.templates['personalization-questions'][language];
    const category = this.detectSkillCategory(content, language);
    
    // ÁÇ∫ÊØèÂÄãÂïèÈ°åÁîüÊàêÂîØ‰∏ÄID
    const questions = baseQuestions.map((q, index) => ({
      id: `fallback-q-${Date.now()}-${index}`,
      question: q.question,
      type: q.type,
      options: q.options,
      required: index < 2 // ÂâçÂÖ©ÂÄãÂïèÈ°åË®≠ÁÇ∫ÂøÖÈ†à
    }));
    
    // Ê†πÊìöÈ°ûÂà•Ê∑ªÂä†ÁâπÂÆöÂïèÈ°å
    if (category) {
      questions.push(this.generateCategorySpecificQuestion(category, language));
    }
    
    return questions;
  }

  /**
   * Ê™¢Ê∏¨ÊäÄËÉΩÈ°ûÂà•
   */
  detectSkillCategory(content, language) {
    const text = content.toLowerCase();
    
    for (const [category, keywords] of Object.entries(this.knowledgeBase.skillCategories)) {
      const categoryKeywords = keywords[language] || keywords.en;
      if (categoryKeywords.some(keyword => text.includes(keyword))) {
        this.stats.knowledgeBaseHits++;
        return category;
      }
    }
    
    return null;
  }

  /**
   * Ê™¢Ê∏¨Èõ£Â∫¶Á≠âÁ¥ö
   */
  detectDifficulty(content, language) {
    const text = content.toLowerCase();
    
    for (const [difficulty, keywords] of Object.entries(this.knowledgeBase.difficultyKeywords)) {
      const difficultyKeywords = keywords[language] || keywords.en;
      if (difficultyKeywords.some(keyword => text.includes(keyword))) {
        return difficulty;
      }
    }
    
    return 'medium'; // È†êË®≠‰∏≠Á≠âÈõ£Â∫¶
  }

  /**
   * Ë®àÁÆóÂæåÂÇôÈüøÊáâÁöÑÂèØ‰ø°Â∫¶
   */
  calculateConfidence(content, requestType) {
    let confidence = 0.5; // Âü∫Ê∫ñÂèØ‰ø°Â∫¶
    
    // Ê†πÊìöÂÖßÂÆπÈï∑Â∫¶Ë™øÊï¥
    if (content.length > 100) confidence += 0.1;
    if (content.length > 300) confidence += 0.1;
    
    // Ê†πÊìöÈóúÈçµË©ûÂåπÈÖçË™øÊï¥
    const category = this.detectSkillCategory(content, 'zh');
    if (category) confidence += 0.2;
    
    // Ê†πÊìöË´ãÊ±ÇÈ°ûÂûãË™øÊï¥
    if (['productivity-tips', 'personalization-questions'].includes(requestType)) {
      confidence += 0.1; // ÈÄô‰∫õÈ°ûÂûãÁöÑÂæåÂÇôÈüøÊáâÈÄöÂ∏∏Êõ¥ÂèØÈù†
    }
    
    return Math.min(1, confidence);
  }

  /**
   * ËºîÂä©ÊñπÊ≥ïÂØ¶Áèæ
   */
  generateContextualGoal(content, language) {
    const title = content.split('\n')[0] || content.substring(0, 50);
    
    if (language === 'zh') {
      return `ÈÄèÈÅéÁ≥ªÁµ±ÂåñÂ≠∏ÁøíÔºåÊéåÊè°„Äå${title}„ÄçÁöÑÊ†∏ÂøÉÁü•Ë≠òÂíåÂØ¶Áî®ÊäÄËÉΩ`;
    } else {
      return `Master core knowledge and practical skills of "${title}" through systematic learning`;
    }
  }

  adjustTemplateByCategory(template, category, difficulty, language) {
    const adjusted = { ...template };
    
    // Ê†πÊìöÈ°ûÂà•Ë™øÊï¥Â∑•ÂÖ∑ÂíåÊ™¢Êü•Èªû
    if (category === 'programming') {
      if (language === 'zh') {
        adjusted.recommendedTools = ["Á∑ö‰∏äÁ∑®Á®ãÂπ≥Âè∞", "IDE/Á∑®ËºØÂô®", "ÊäÄË°ìÊñáÊ™î", "ÈñãÊ∫êÈ†ÖÁõÆ", "Á®ãÂºèË®≠Ë®àÁ§æÁæ§"];
        adjusted.checkpoints = ["Áí∞Â¢ÉÊê≠Âª∫", "Ë™ûÊ≥ïÂü∫Á§é", "ÂØ¶‰ΩúÂ∞èÈ†ÖÁõÆ", "ÈÄ≤ÈöéÁâπÊÄß", "ÂÆåÊï¥ÊáâÁî®ÈñãÁôº"];
      }
    } else if (category === 'language') {
      if (language === 'zh') {
        adjusted.recommendedTools = ["Ë™ûË®ÄÂ≠∏ÁøíApp", "Ë™ûÊ≥ïÊõ∏Á±ç", "ËÅΩÂäõÁ∑¥Áøí", "Âè£Ë™ûÂ∞çË©±", "ÊñáÂåñË≥áÊ∫ê"];
        adjusted.checkpoints = ["Âü∫Á§éË©ûÂΩô", "Ë™ûÊ≥ïË¶èÂâá", "ËÅΩË™™Á∑¥Áøí", "Èñ±ËÆÄÁêÜËß£", "ÊµÅÂà©Â∞çË©±"];
      }
    }
    
    return adjusted;
  }

  estimateTimeByDifficulty(difficulty) {
    const baseTime = 180; // 3Â∞èÊôÇÂü∫Ê∫ñ
    const multipliers = { easy: 0.7, medium: 1.0, hard: 1.5 };
    return Math.round(baseTime * (multipliers[difficulty] || 1.0));
  }

  contextualizeSubtaskTitle(title, content, language) {
    // Á∞°ÂñÆÁöÑ‰∏ä‰∏ãÊñáÂåñÔºåÂØ¶ÈöõÂØ¶ÁèæÂèØ‰ª•Êõ¥Ë§áÈõú
    const topic = content.split('\n')[0] || content.substring(0, 30);
    return title.replace(/Â≠∏Áøí|Learn/, language === 'zh' ? `Â≠∏Áøí${topic}ÁöÑ` : `Learn ${topic}`);
  }

  generateSubtaskDescription(title, content, language) {
    if (language === 'zh') {
      return `Ë©≥Á¥∞Â≠∏ÁøíÂíåÁêÜËß£${title}ÔºåÈÄöÈÅéÁêÜË´ñÂ≠∏ÁøíÂíåÂØ¶Ë∏êÁ∑¥ÁøíÊéåÊè°Áõ∏ÈóúÁü•Ë≠òÂíåÊäÄËÉΩ„ÄÇ`;
    } else {
      return `Study and understand ${title} in detail through theoretical learning and practical exercises.`;
    }
  }

  adjustDurationByDifficulty(baseDuration, difficulty) {
    const multipliers = { easy: 0.8, medium: 1.0, hard: 1.3 };
    return Math.round(baseDuration * (multipliers[difficulty] || 1.0));
  }

  adjustSubtaskDifficulty(baseDifficulty, overallDifficulty) {
    // Ê†πÊìöÊï¥È´îÈõ£Â∫¶Ë™øÊï¥Â≠ê‰ªªÂãôÈõ£Â∫¶
    if (overallDifficulty === 'easy' && baseDifficulty === 'hard') return 'medium';
    if (overallDifficulty === 'hard' && baseDifficulty === 'easy') return 'medium';
    return baseDifficulty;
  }

  getPhaseForIndex(index) {
    const phases = ['knowledge', 'practice', 'application', 'mastery', 'creation'];
    return phases[index] || 'practice';
  }

  generateTagsForCategory(category, language) {
    const categoryTags = {
      programming: language === 'zh' ? ['Á®ãÂºèË®≠Ë®à', 'ÈñãÁôº', 'ÊäÄË°ì'] : ['programming', 'development', 'technical'],
      language: language === 'zh' ? ['Ë™ûË®ÄÂ≠∏Áøí', 'Ê∫ùÈÄö', 'ÊñáÂåñ'] : ['language learning', 'communication', 'culture'],
      business: language === 'zh' ? ['ÂïÜÊ•≠ÊäÄËÉΩ', 'ÁÆ°ÁêÜ', 'Á≠ñÁï•'] : ['business skills', 'management', 'strategy'],
      design: language === 'zh' ? ['Ë®≠Ë®àÊÄùÁ∂≠', 'ÂâµÊÑè', 'Ë¶ñË¶∫'] : ['design thinking', 'creative', 'visual'],
      technology: language === 'zh' ? ['ÁßëÊäÄ', 'ÂâµÊñ∞', 'Êï∏‰Ωç'] : ['technology', 'innovation', 'digital']
    };
    
    return categoryTags[category] || (language === 'zh' ? ['Â≠∏Áøí', 'ÊäÄËÉΩ'] : ['learning', 'skills']);
  }

  contextualizeQuestion(question, content, category, language) {
    // Á∞°ÂñÆÁöÑÂïèÈ°å‰∏ä‰∏ãÊñáÂåñ
    const topic = content.split('\n')[0] || content.substring(0, 20);
    return question.replace(/ÈÄôÂÄãÂ≠∏ÁøíÂÖßÂÆπ|this learning content/, language === 'zh' ? `„Äå${topic}„Äç` : `"${topic}"`);
  }

  generateCategorySpecificQuestion(category, language) {
    const specificQuestions = {
      programming: {
        zh: { question: "ÊÇ®Â∏åÊúõÂ∞àÊ≥®ÊñºÂì™Á®ÆÁ®ãÂºèË™ûË®ÄÊàñÊäÄË°ìÊ£ßÔºü", type: "text", required: false },
        en: { question: "Which programming language or tech stack would you like to focus on?", type: "text", required: false }
      },
      language: {
        zh: { question: "ÊÇ®ÁöÑË™ûË®ÄÂ≠∏ÁøíÁõÆÊ®ôÊòØ‰ªÄÈ∫ºÔºàÂ¶ÇËÄÉË©¶„ÄÅÂ∑•‰Ωú„ÄÅÊóÖÈÅäÔºâÔºü", type: "text", required: false },
        en: { question: "What's your language learning goal (exam, work, travel)?", type: "text", required: false }
      }
    };
    
    const categoryQuestion = specificQuestions[category];
    if (categoryQuestion && categoryQuestion[language]) {
      return {
        id: `category-specific-${Date.now()}`,
        ...categoryQuestion[language]
      };
    }
    
    return null;
  }

  generateMinimalFallback(requestType, language) {
    const minimal = {
      'learning-plan': {
        zh: { achievableGoal: "Âà∂ÂÆöÂ≠∏ÁøíË®àÂäÉ", recommendedTools: ["Â≠∏ÁøíË≥áÊ∫ê"], checkpoints: ["ÈñãÂßãÂ≠∏Áøí"], estimatedTimeToCompletion: 60 },
        en: { achievableGoal: "Create learning plan", recommendedTools: ["Learning resources"], checkpoints: ["Start learning"], estimatedTimeToCompletion: 60 }
      },
      'subtasks-generation': {
        zh: [{ id: 'minimal-1', title: "ÈñãÂßãÂ≠∏Áøí", text: "ÈñãÂßãÊÇ®ÁöÑÂ≠∏ÁøíÊóÖÁ®ã", aiEstimatedDuration: 30, difficulty: 'easy' }],
        en: [{ id: 'minimal-1', title: "Start learning", text: "Begin your learning journey", aiEstimatedDuration: 30, difficulty: 'easy' }]
      }
    };
    
    return minimal[requestType]?.[language] || { _error: 'Minimal fallback failed' };
  }

  getStats() {
    return {
      ...this.stats,
      effectivenessRate: this.stats.successRate,
      knowledgeBaseEfficiency: this.stats.knowledgeBaseHits / Math.max(1, this.stats.fallbackUsage)
    };
  }

  reset() {
    this.stats = {
      fallbackUsage: 0,
      successRate: 0,
      templateMatches: 0,
      knowledgeBaseHits: 0
    };
  }
}

// Export classes and singleton instances
const geminiService = new GeminiService();
const enhancedFallbackService = new EnhancedFallbackService();

module.exports = GeminiService; 